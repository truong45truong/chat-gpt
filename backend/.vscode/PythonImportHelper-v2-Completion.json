[
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "shlex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shlex",
        "description": "shlex",
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "plac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plac",
        "description": "plac",
        "detail": "plac",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "mlab",
        "importPath": "mayavi",
        "description": "mayavi",
        "isExtraImport": true,
        "detail": "mayavi",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "distance",
        "importPath": "scipy.spatial",
        "description": "scipy.spatial",
        "isExtraImport": true,
        "detail": "scipy.spatial",
        "documentation": {}
    },
    {
        "label": "bipartite",
        "importPath": "networkx.algorithms",
        "description": "networkx.algorithms",
        "isExtraImport": true,
        "detail": "networkx.algorithms",
        "documentation": {}
    },
    {
        "label": "approximation",
        "importPath": "networkx.algorithms",
        "description": "networkx.algorithms",
        "isExtraImport": true,
        "detail": "networkx.algorithms",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "numpy.linalg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.linalg",
        "description": "numpy.linalg",
        "detail": "numpy.linalg",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "networkx.algorithms.approximation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx.algorithms.approximation",
        "description": "networkx.algorithms.approximation",
        "detail": "networkx.algorithms.approximation",
        "documentation": {}
    },
    {
        "label": "getaddresses",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "mailbox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mailbox",
        "description": "mailbox",
        "detail": "mailbox",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_lowercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema_field",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema_field",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema_field",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiParameter",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiParameter",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "authentication_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "IsUserAuthenticated",
        "importPath": "gpt_base.auth.permission_class",
        "description": "gpt_base.auth.permission_class",
        "isExtraImport": true,
        "detail": "gpt_base.auth.permission_class",
        "documentation": {}
    },
    {
        "label": "IsUserAuthenticated",
        "importPath": "gpt_base.auth.permission_class",
        "description": "gpt_base.auth.permission_class",
        "isExtraImport": true,
        "detail": "gpt_base.auth.permission_class",
        "documentation": {}
    },
    {
        "label": "IsUserAuthenticated",
        "importPath": "gpt_base.auth.permission_class",
        "description": "gpt_base.auth.permission_class",
        "isExtraImport": true,
        "detail": "gpt_base.auth.permission_class",
        "documentation": {}
    },
    {
        "label": "IsUserAuthenticated",
        "importPath": "gpt_base.auth.permission_class",
        "description": "gpt_base.auth.permission_class",
        "isExtraImport": true,
        "detail": "gpt_base.auth.permission_class",
        "documentation": {}
    },
    {
        "label": "IsUserAuthenticated",
        "importPath": "gpt_base.auth.permission_class",
        "description": "gpt_base.auth.permission_class",
        "isExtraImport": true,
        "detail": "gpt_base.auth.permission_class",
        "documentation": {}
    },
    {
        "label": "IsUserAuthenticated",
        "importPath": "gpt_base.auth.permission_class",
        "description": "gpt_base.auth.permission_class",
        "isExtraImport": true,
        "detail": "gpt_base.auth.permission_class",
        "documentation": {}
    },
    {
        "label": "ResetPasswordSerializer",
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "isExtraImport": true,
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordSerializer",
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "isExtraImport": true,
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "ChangePasswordSerializer",
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "isExtraImport": true,
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "isExtraImport": true,
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairSerializer",
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "isExtraImport": true,
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "CustomTokenRefreshSerializer",
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "isExtraImport": true,
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "ResetPasswordSerializer",
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "isExtraImport": true,
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordSerializer",
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "isExtraImport": true,
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "ChangePasswordSerializer",
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "isExtraImport": true,
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "isExtraImport": true,
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "importPath": "gpt_base.auth.services",
        "description": "gpt_base.auth.services",
        "isExtraImport": true,
        "detail": "gpt_base.auth.services",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework_simplejwt",
        "description": "rest_framework_simplejwt",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt",
        "documentation": {}
    },
    {
        "label": "TokenError",
        "importPath": "rest_framework_simplejwt.exceptions",
        "description": "rest_framework_simplejwt.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework_simplejwt.exceptions",
        "description": "rest_framework_simplejwt.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.exceptions",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenViewBase",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "CustomerInvalidToken",
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomAPIException",
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomAPIException",
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomAPIException",
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomAPIException",
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomAPIException",
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomAPIException",
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomAPIException",
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomAPIException",
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "PasswordResetTokenGenerator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "PasswordResetTokenGenerator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "token_backend",
        "importPath": "rest_framework_simplejwt.state",
        "description": "rest_framework_simplejwt.state",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.state",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "TokenRefreshSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "gpt_base",
        "description": "gpt_base",
        "isExtraImport": true,
        "detail": "gpt_base",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "gpt_base",
        "description": "gpt_base",
        "isExtraImport": true,
        "detail": "gpt_base",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "gpt_base",
        "description": "gpt_base",
        "isExtraImport": true,
        "detail": "gpt_base",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "gpt_base",
        "description": "gpt_base",
        "isExtraImport": true,
        "detail": "gpt_base",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "gpt_base",
        "description": "gpt_base",
        "isExtraImport": true,
        "detail": "gpt_base",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "gpt_base",
        "description": "gpt_base",
        "isExtraImport": true,
        "detail": "gpt_base",
        "documentation": {}
    },
    {
        "label": "message_code",
        "importPath": "gpt_base.common.constants",
        "description": "gpt_base.common.constants",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants",
        "documentation": {}
    },
    {
        "label": "message_code",
        "importPath": "gpt_base.common.constants",
        "description": "gpt_base.common.constants",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants",
        "documentation": {}
    },
    {
        "label": "message_code",
        "importPath": "gpt_base.common.constants",
        "description": "gpt_base.common.constants",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants",
        "documentation": {}
    },
    {
        "label": "RegexPattern",
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairEnum",
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "ProviderEnum",
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "RegexPattern",
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "RoleEnum",
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "RoleEnum",
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "RoleEnum",
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "RoleEnum",
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "RoleEnum",
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "RegexPattern",
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "RoleEnum",
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "RoleEnum",
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "DBFieldsCommon",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBFieldsCommon",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBConversationsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBMembersFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBUserFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBUserFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBChatsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBConversationsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBChatsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBConversationsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBChatsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBConversationsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBChatsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBConversationsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBChatsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBTemplatesFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBWorkBooksFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBDocumentsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBUserFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBPromptsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBConversationsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBChatsFields",
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "FieldCrypto",
        "importPath": "gpt_base.common.utils.crypto",
        "description": "gpt_base.common.utils.crypto",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.crypto",
        "documentation": {}
    },
    {
        "label": "FieldCrypto",
        "importPath": "gpt_base.common.utils.crypto",
        "description": "gpt_base.common.utils.crypto",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.crypto",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "gpt_base.common.utils.middleware",
        "description": "gpt_base.common.utils.middleware",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "gpt_base.common.utils.middleware",
        "description": "gpt_base.common.utils.middleware",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "gpt_base.common.utils.middleware",
        "description": "gpt_base.common.utils.middleware",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "gpt_base.common.utils.middleware",
        "description": "gpt_base.common.utils.middleware",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.middleware",
        "documentation": {}
    },
    {
        "label": "check_regex",
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "get_current_time",
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "get_current_time",
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "check_regex",
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "gpt_base.user.models",
        "description": "gpt_base.user.models",
        "isExtraImport": true,
        "detail": "gpt_base.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "gpt_base.user.models",
        "description": "gpt_base.user.models",
        "isExtraImport": true,
        "detail": "gpt_base.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "gpt_base.user.models",
        "description": "gpt_base.user.models",
        "isExtraImport": true,
        "detail": "gpt_base.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "gpt_base.user.models",
        "description": "gpt_base.user.models",
        "isExtraImport": true,
        "detail": "gpt_base.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "gpt_base.user.models",
        "description": "gpt_base.user.models",
        "isExtraImport": true,
        "detail": "gpt_base.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "gpt_base.user.models",
        "description": "gpt_base.user.models",
        "isExtraImport": true,
        "detail": "gpt_base.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "gpt_base.user.models",
        "description": "gpt_base.user.models",
        "isExtraImport": true,
        "detail": "gpt_base.user.models",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "MailTemplateEnum",
        "importPath": "gpt_base.common.constants.mail",
        "description": "gpt_base.common.constants.mail",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.mail",
        "documentation": {}
    },
    {
        "label": "UserInfoSerializer",
        "importPath": "gpt_base.user.serializers.user",
        "description": "gpt_base.user.serializers.user",
        "isExtraImport": true,
        "detail": "gpt_base.user.serializers.user",
        "documentation": {}
    },
    {
        "label": "UserInfoSerializer",
        "importPath": "gpt_base.user.serializers.user",
        "description": "gpt_base.user.serializers.user",
        "isExtraImport": true,
        "detail": "gpt_base.user.serializers.user",
        "documentation": {}
    },
    {
        "label": "MembersDetailUpdateSerializer",
        "importPath": "gpt_base.members.serializers.members",
        "description": "gpt_base.members.serializers.members",
        "isExtraImport": true,
        "detail": "gpt_base.members.serializers.members",
        "documentation": {}
    },
    {
        "label": "MembersDetailUpdateSerializer",
        "importPath": "gpt_base.members.serializers.members",
        "description": "gpt_base.members.serializers.members",
        "isExtraImport": true,
        "detail": "gpt_base.members.serializers.members",
        "documentation": {}
    },
    {
        "label": "MembersDetailUpdateSerializer",
        "importPath": "gpt_base.members.serializers.members",
        "description": "gpt_base.members.serializers.members",
        "isExtraImport": true,
        "detail": "gpt_base.members.serializers.members",
        "documentation": {}
    },
    {
        "label": "MembersDetailUpdateSerializer",
        "importPath": "gpt_base.members.serializers.members",
        "description": "gpt_base.members.serializers.members",
        "isExtraImport": true,
        "detail": "gpt_base.members.serializers.members",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models",
        "description": "gpt_base.members.models",
        "isExtraImport": true,
        "detail": "gpt_base.members.models",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models",
        "description": "gpt_base.members.models",
        "isExtraImport": true,
        "detail": "gpt_base.members.models",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models",
        "description": "gpt_base.members.models",
        "isExtraImport": true,
        "detail": "gpt_base.members.models",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models",
        "description": "gpt_base.members.models",
        "isExtraImport": true,
        "detail": "gpt_base.members.models",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models",
        "description": "gpt_base.members.models",
        "isExtraImport": true,
        "detail": "gpt_base.members.models",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models",
        "description": "gpt_base.members.models",
        "isExtraImport": true,
        "detail": "gpt_base.members.models",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models",
        "description": "gpt_base.members.models",
        "isExtraImport": true,
        "detail": "gpt_base.members.models",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models",
        "description": "gpt_base.members.models",
        "isExtraImport": true,
        "detail": "gpt_base.members.models",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models",
        "description": "gpt_base.members.models",
        "isExtraImport": true,
        "detail": "gpt_base.members.models",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models",
        "description": "gpt_base.members.models",
        "isExtraImport": true,
        "detail": "gpt_base.members.models",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models",
        "description": "gpt_base.members.models",
        "isExtraImport": true,
        "detail": "gpt_base.members.models",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reset_password",
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "isExtraImport": true,
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "forgot_password",
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "isExtraImport": true,
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "change_password",
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "isExtraImport": true,
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "get_me",
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "isExtraImport": true,
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "verify_email",
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "isExtraImport": true,
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "change_email_login",
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "isExtraImport": true,
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "confirm_change_email_login",
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "isExtraImport": true,
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "check_verify_token",
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "isExtraImport": true,
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "resend_verify_email",
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "isExtraImport": true,
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "check_session",
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "isExtraImport": true,
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairView",
        "importPath": "gpt_base.auth.views.view_set",
        "description": "gpt_base.auth.views.view_set",
        "isExtraImport": true,
        "detail": "gpt_base.auth.views.view_set",
        "documentation": {}
    },
    {
        "label": "CustomTokenRefreshView",
        "importPath": "gpt_base.auth.views.view_set",
        "description": "gpt_base.auth.views.view_set",
        "isExtraImport": true,
        "detail": "gpt_base.auth.views.view_set",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "unique",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "importPath": "gpt_base.common.models.managers",
        "description": "gpt_base.common.models.managers",
        "isExtraImport": true,
        "detail": "gpt_base.common.models.managers",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.base_user",
        "description": "django.contrib.auth.base_user",
        "isExtraImport": true,
        "detail": "django.contrib.auth.base_user",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "tiktoken",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tiktoken",
        "description": "tiktoken",
        "detail": "tiktoken",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "MultiFernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "APIException",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "local",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "MiddlewareMixin",
        "importPath": "django.utils.deprecation",
        "description": "django.utils.deprecation",
        "isExtraImport": true,
        "detail": "django.utils.deprecation",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "FormatDateTime",
        "importPath": "gpt_base.common.constants.date_time",
        "description": "gpt_base.common.constants.date_time",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.date_time",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "ModelAppLabel",
        "importPath": "gpt_base.common.constants.app_label",
        "description": "gpt_base.common.constants.app_label",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.app_label",
        "documentation": {}
    },
    {
        "label": "ModelAppLabel",
        "importPath": "gpt_base.common.constants.app_label",
        "description": "gpt_base.common.constants.app_label",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.app_label",
        "documentation": {}
    },
    {
        "label": "ModelAppLabel",
        "importPath": "gpt_base.common.constants.app_label",
        "description": "gpt_base.common.constants.app_label",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.app_label",
        "documentation": {}
    },
    {
        "label": "ModelAppLabel",
        "importPath": "gpt_base.common.constants.app_label",
        "description": "gpt_base.common.constants.app_label",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.app_label",
        "documentation": {}
    },
    {
        "label": "ModelAppLabel",
        "importPath": "gpt_base.common.constants.app_label",
        "description": "gpt_base.common.constants.app_label",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.app_label",
        "documentation": {}
    },
    {
        "label": "ModelAppLabel",
        "importPath": "gpt_base.common.constants.app_label",
        "description": "gpt_base.common.constants.app_label",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.app_label",
        "documentation": {}
    },
    {
        "label": "DBTable",
        "importPath": "gpt_base.common.constants.db_table",
        "description": "gpt_base.common.constants.db_table",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_table",
        "documentation": {}
    },
    {
        "label": "DBTable",
        "importPath": "gpt_base.common.constants.db_table",
        "description": "gpt_base.common.constants.db_table",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_table",
        "documentation": {}
    },
    {
        "label": "DBTable",
        "importPath": "gpt_base.common.constants.db_table",
        "description": "gpt_base.common.constants.db_table",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_table",
        "documentation": {}
    },
    {
        "label": "DBTable",
        "importPath": "gpt_base.common.constants.db_table",
        "description": "gpt_base.common.constants.db_table",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_table",
        "documentation": {}
    },
    {
        "label": "DBTable",
        "importPath": "gpt_base.common.constants.db_table",
        "description": "gpt_base.common.constants.db_table",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_table",
        "documentation": {}
    },
    {
        "label": "DBTable",
        "importPath": "gpt_base.common.constants.db_table",
        "description": "gpt_base.common.constants.db_table",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_table",
        "documentation": {}
    },
    {
        "label": "DBTable",
        "importPath": "gpt_base.common.constants.db_table",
        "description": "gpt_base.common.constants.db_table",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_table",
        "documentation": {}
    },
    {
        "label": "DBTable",
        "importPath": "gpt_base.common.constants.db_table",
        "description": "gpt_base.common.constants.db_table",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.db_table",
        "documentation": {}
    },
    {
        "label": "RelatedName",
        "importPath": "gpt_base.common.constants.related_name",
        "description": "gpt_base.common.constants.related_name",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.related_name",
        "documentation": {}
    },
    {
        "label": "RelatedName",
        "importPath": "gpt_base.common.constants.related_name",
        "description": "gpt_base.common.constants.related_name",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.related_name",
        "documentation": {}
    },
    {
        "label": "RelatedName",
        "importPath": "gpt_base.common.constants.related_name",
        "description": "gpt_base.common.constants.related_name",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.related_name",
        "documentation": {}
    },
    {
        "label": "RelatedName",
        "importPath": "gpt_base.common.constants.related_name",
        "description": "gpt_base.common.constants.related_name",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.related_name",
        "documentation": {}
    },
    {
        "label": "RelatedName",
        "importPath": "gpt_base.common.constants.related_name",
        "description": "gpt_base.common.constants.related_name",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.related_name",
        "documentation": {}
    },
    {
        "label": "VerboseNamePlural",
        "importPath": "gpt_base.common.constants.verbose_name_plural",
        "description": "gpt_base.common.constants.verbose_name_plural",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.verbose_name_plural",
        "documentation": {}
    },
    {
        "label": "VerboseNamePlural",
        "importPath": "gpt_base.common.constants.verbose_name_plural",
        "description": "gpt_base.common.constants.verbose_name_plural",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.verbose_name_plural",
        "documentation": {}
    },
    {
        "label": "VerboseNamePlural",
        "importPath": "gpt_base.common.constants.verbose_name_plural",
        "description": "gpt_base.common.constants.verbose_name_plural",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.verbose_name_plural",
        "documentation": {}
    },
    {
        "label": "VerboseNamePlural",
        "importPath": "gpt_base.common.constants.verbose_name_plural",
        "description": "gpt_base.common.constants.verbose_name_plural",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.verbose_name_plural",
        "documentation": {}
    },
    {
        "label": "VerboseNamePlural",
        "importPath": "gpt_base.common.constants.verbose_name_plural",
        "description": "gpt_base.common.constants.verbose_name_plural",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.verbose_name_plural",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "importPath": "gpt_base.common.models.base",
        "description": "gpt_base.common.models.base",
        "isExtraImport": true,
        "detail": "gpt_base.common.models.base",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "importPath": "gpt_base.common.models.base",
        "description": "gpt_base.common.models.base",
        "isExtraImport": true,
        "detail": "gpt_base.common.models.base",
        "documentation": {}
    },
    {
        "label": "MaterBaseModel",
        "importPath": "gpt_base.common.models.base",
        "description": "gpt_base.common.models.base",
        "isExtraImport": true,
        "detail": "gpt_base.common.models.base",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "importPath": "gpt_base.common.models.base",
        "description": "gpt_base.common.models.base",
        "isExtraImport": true,
        "detail": "gpt_base.common.models.base",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "importPath": "gpt_base.common.models.base",
        "description": "gpt_base.common.models.base",
        "isExtraImport": true,
        "detail": "gpt_base.common.models.base",
        "documentation": {}
    },
    {
        "label": "CustomBaseUserModel",
        "importPath": "gpt_base.common.models.base",
        "description": "gpt_base.common.models.base",
        "isExtraImport": true,
        "detail": "gpt_base.common.models.base",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models.members",
        "description": "gpt_base.members.models.members",
        "isExtraImport": true,
        "detail": "gpt_base.members.models.members",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models.members",
        "description": "gpt_base.members.models.members",
        "isExtraImport": true,
        "detail": "gpt_base.members.models.members",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models.members",
        "description": "gpt_base.members.models.members",
        "isExtraImport": true,
        "detail": "gpt_base.members.models.members",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models.members",
        "description": "gpt_base.members.models.members",
        "isExtraImport": true,
        "detail": "gpt_base.members.models.members",
        "documentation": {}
    },
    {
        "label": "Members",
        "importPath": "gpt_base.members.models.members",
        "description": "gpt_base.members.models.members",
        "isExtraImport": true,
        "detail": "gpt_base.members.models.members",
        "documentation": {}
    },
    {
        "label": "TranslateTypesMaster",
        "importPath": "gpt_base.master.models",
        "description": "gpt_base.master.models",
        "isExtraImport": true,
        "detail": "gpt_base.master.models",
        "documentation": {}
    },
    {
        "label": "TranslateTypesMaster",
        "importPath": "gpt_base.master.models",
        "description": "gpt_base.master.models",
        "isExtraImport": true,
        "detail": "gpt_base.master.models",
        "documentation": {}
    },
    {
        "label": "TranslateTypesMaster",
        "importPath": "gpt_base.master.models",
        "description": "gpt_base.master.models",
        "isExtraImport": true,
        "detail": "gpt_base.master.models",
        "documentation": {}
    },
    {
        "label": "TranslateTypesMaster",
        "importPath": "gpt_base.master.models",
        "description": "gpt_base.master.models",
        "isExtraImport": true,
        "detail": "gpt_base.master.models",
        "documentation": {}
    },
    {
        "label": "WritableNestedModelSerializer",
        "importPath": "drf_writable_nested",
        "description": "drf_writable_nested",
        "isExtraImport": true,
        "detail": "drf_writable_nested",
        "documentation": {}
    },
    {
        "label": "WritableNestedModelSerializer",
        "importPath": "drf_writable_nested",
        "description": "drf_writable_nested",
        "isExtraImport": true,
        "detail": "drf_writable_nested",
        "documentation": {}
    },
    {
        "label": "WritableNestedModelSerializer",
        "importPath": "drf_writable_nested",
        "description": "drf_writable_nested",
        "isExtraImport": true,
        "detail": "drf_writable_nested",
        "documentation": {}
    },
    {
        "label": "WritableNestedModelSerializer",
        "importPath": "drf_writable_nested",
        "description": "drf_writable_nested",
        "isExtraImport": true,
        "detail": "drf_writable_nested",
        "documentation": {}
    },
    {
        "label": "WritableNestedModelSerializer",
        "importPath": "drf_writable_nested",
        "description": "drf_writable_nested",
        "isExtraImport": true,
        "detail": "drf_writable_nested",
        "documentation": {}
    },
    {
        "label": "Conversations",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Conversations",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Conversations",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Conversations",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Conversations",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Conversations",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Conversations",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Conversations",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Conversations",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "Conversations",
        "importPath": "gpt_base.conversations.models",
        "description": "gpt_base.conversations.models",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.models",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Templates",
        "importPath": "gpt_base.documents.models",
        "description": "gpt_base.documents.models",
        "isExtraImport": true,
        "detail": "gpt_base.documents.models",
        "documentation": {}
    },
    {
        "label": "WorkBooks",
        "importPath": "gpt_base.documents.models",
        "description": "gpt_base.documents.models",
        "isExtraImport": true,
        "detail": "gpt_base.documents.models",
        "documentation": {}
    },
    {
        "label": "Documents",
        "importPath": "gpt_base.documents.models",
        "description": "gpt_base.documents.models",
        "isExtraImport": true,
        "detail": "gpt_base.documents.models",
        "documentation": {}
    },
    {
        "label": "Templates",
        "importPath": "gpt_base.documents.models",
        "description": "gpt_base.documents.models",
        "isExtraImport": true,
        "detail": "gpt_base.documents.models",
        "documentation": {}
    },
    {
        "label": "WorkBooks",
        "importPath": "gpt_base.documents.models",
        "description": "gpt_base.documents.models",
        "isExtraImport": true,
        "detail": "gpt_base.documents.models",
        "documentation": {}
    },
    {
        "label": "Documents",
        "importPath": "gpt_base.documents.models",
        "description": "gpt_base.documents.models",
        "isExtraImport": true,
        "detail": "gpt_base.documents.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "gpt_base.user.models.user",
        "description": "gpt_base.user.models.user",
        "isExtraImport": true,
        "detail": "gpt_base.user.models.user",
        "documentation": {}
    },
    {
        "label": "Prompts",
        "importPath": "gpt_base.prompts.models",
        "description": "gpt_base.prompts.models",
        "isExtraImport": true,
        "detail": "gpt_base.prompts.models",
        "documentation": {}
    },
    {
        "label": "Prompts",
        "importPath": "gpt_base.prompts.models",
        "description": "gpt_base.prompts.models",
        "isExtraImport": true,
        "detail": "gpt_base.prompts.models",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "default_headers",
        "importPath": "corsheaders.defaults",
        "description": "corsheaders.defaults",
        "isExtraImport": true,
        "detail": "corsheaders.defaults",
        "documentation": {}
    },
    {
        "label": "SpectacularAPIView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularSwaggerView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularRedocView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "ChatGPTServiceBase",
        "importPath": "gpt_base.common.services.chat_gpt",
        "description": "gpt_base.common.services.chat_gpt",
        "isExtraImport": true,
        "detail": "gpt_base.common.services.chat_gpt",
        "documentation": {}
    },
    {
        "label": "ChatGPTServiceBase",
        "importPath": "gpt_base.common.services.chat_gpt",
        "description": "gpt_base.common.services.chat_gpt",
        "isExtraImport": true,
        "detail": "gpt_base.common.services.chat_gpt",
        "documentation": {}
    },
    {
        "label": "StreamingHttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "StreamingHttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "ChatGPTService",
        "importPath": "gpt_user.chat_gpt.services.chat_gpt",
        "description": "gpt_user.chat_gpt.services.chat_gpt",
        "isExtraImport": true,
        "detail": "gpt_user.chat_gpt.services.chat_gpt",
        "documentation": {}
    },
    {
        "label": "view_api",
        "importPath": "gpt_user.chat_gpt.views",
        "description": "gpt_user.chat_gpt.views",
        "isExtraImport": true,
        "detail": "gpt_user.chat_gpt.views",
        "documentation": {}
    },
    {
        "label": "django_filters",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_filters",
        "description": "django_filters",
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "ForeignKeyField",
        "importPath": "gpt_base.common.utils.serializers",
        "description": "gpt_base.common.utils.serializers",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.serializers",
        "documentation": {}
    },
    {
        "label": "ForeignKeyField",
        "importPath": "gpt_base.common.utils.serializers",
        "description": "gpt_base.common.utils.serializers",
        "isExtraImport": true,
        "detail": "gpt_base.common.utils.serializers",
        "documentation": {}
    },
    {
        "label": "TranslateTypesEnum",
        "importPath": "gpt_base.common.constants.master_data",
        "description": "gpt_base.common.constants.master_data",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.master_data",
        "documentation": {}
    },
    {
        "label": "TranslateTypesEnum",
        "importPath": "gpt_base.common.constants.master_data",
        "description": "gpt_base.common.constants.master_data",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.master_data",
        "documentation": {}
    },
    {
        "label": "ChatBaseService",
        "importPath": "gpt_base.conversations.services.chat",
        "description": "gpt_base.conversations.services.chat",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.services.chat",
        "documentation": {}
    },
    {
        "label": "ConversationsBaseService",
        "importPath": "gpt_base.conversations.services.conversations",
        "description": "gpt_base.conversations.services.conversations",
        "isExtraImport": true,
        "detail": "gpt_base.conversations.services.conversations",
        "documentation": {}
    },
    {
        "label": "Concat",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Concat",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "ViewSetAction",
        "importPath": "gpt_base.common.constants.view_action",
        "description": "gpt_base.common.constants.view_action",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.view_action",
        "documentation": {}
    },
    {
        "label": "ConversationViewSetAction",
        "importPath": "gpt_base.common.constants.view_action",
        "description": "gpt_base.common.constants.view_action",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.view_action",
        "documentation": {}
    },
    {
        "label": "ViewSetAction",
        "importPath": "gpt_base.common.constants.view_action",
        "description": "gpt_base.common.constants.view_action",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.view_action",
        "documentation": {}
    },
    {
        "label": "ConversationViewSetAction",
        "importPath": "gpt_base.common.constants.view_action",
        "description": "gpt_base.common.constants.view_action",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.view_action",
        "documentation": {}
    },
    {
        "label": "ViewSetAction",
        "importPath": "gpt_base.common.constants.view_action",
        "description": "gpt_base.common.constants.view_action",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.view_action",
        "documentation": {}
    },
    {
        "label": "ViewSetAction",
        "importPath": "gpt_base.common.constants.view_action",
        "description": "gpt_base.common.constants.view_action",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.view_action",
        "documentation": {}
    },
    {
        "label": "ViewSetAction",
        "importPath": "gpt_base.common.constants.view_action",
        "description": "gpt_base.common.constants.view_action",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.view_action",
        "documentation": {}
    },
    {
        "label": "ConversationViewSetAction",
        "importPath": "gpt_base.common.constants.view_action",
        "description": "gpt_base.common.constants.view_action",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.view_action",
        "documentation": {}
    },
    {
        "label": "ViewSetAction",
        "importPath": "gpt_base.common.constants.view_action",
        "description": "gpt_base.common.constants.view_action",
        "isExtraImport": true,
        "detail": "gpt_base.common.constants.view_action",
        "documentation": {}
    },
    {
        "label": "ConversationsDetailListSerializer",
        "importPath": "gpt_user.conversations.serializers.conversations",
        "description": "gpt_user.conversations.serializers.conversations",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.serializers.conversations",
        "documentation": {}
    },
    {
        "label": "ConversationsCreateSerializer",
        "importPath": "gpt_user.conversations.serializers.conversations",
        "description": "gpt_user.conversations.serializers.conversations",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.serializers.conversations",
        "documentation": {}
    },
    {
        "label": "ConversationsUpdateSerializer",
        "importPath": "gpt_user.conversations.serializers.conversations",
        "description": "gpt_user.conversations.serializers.conversations",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.serializers.conversations",
        "documentation": {}
    },
    {
        "label": "ChatsUpdateSerializer",
        "importPath": "gpt_user.conversations.serializers.conversations",
        "description": "gpt_user.conversations.serializers.conversations",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.serializers.conversations",
        "documentation": {}
    },
    {
        "label": "ChatsDetailListSerializer",
        "importPath": "gpt_user.conversations.serializers.conversations",
        "description": "gpt_user.conversations.serializers.conversations",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.serializers.conversations",
        "documentation": {}
    },
    {
        "label": "ConversationsService",
        "importPath": "gpt_user.conversations.services.conversations",
        "description": "gpt_user.conversations.services.conversations",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.services.conversations",
        "documentation": {}
    },
    {
        "label": "ConversationsService",
        "importPath": "gpt_user.conversations.services.conversations",
        "description": "gpt_user.conversations.services.conversations",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.services.conversations",
        "documentation": {}
    },
    {
        "label": "ChatService",
        "importPath": "gpt_user.conversations.services.chat",
        "description": "gpt_user.conversations.services.chat",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.services.chat",
        "documentation": {}
    },
    {
        "label": "ChatService",
        "importPath": "gpt_user.conversations.services.chat",
        "description": "gpt_user.conversations.services.chat",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.services.chat",
        "documentation": {}
    },
    {
        "label": "ChatListFilterSet",
        "importPath": "gpt_user.conversations.filter.chats",
        "description": "gpt_user.conversations.filter.chats",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.filter.chats",
        "documentation": {}
    },
    {
        "label": "ChatListFilterSet",
        "importPath": "gpt_user.conversations.filter.chats",
        "description": "gpt_user.conversations.filter.chats",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.filter.chats",
        "documentation": {}
    },
    {
        "label": "ConversationViewSet",
        "importPath": "gpt_user.conversations.views.view_set",
        "description": "gpt_user.conversations.views.view_set",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.views.view_set",
        "documentation": {}
    },
    {
        "label": "ChatViewSet",
        "importPath": "gpt_user.conversations.views.view_set",
        "description": "gpt_user.conversations.views.view_set",
        "isExtraImport": true,
        "detail": "gpt_user.conversations.views.view_set",
        "documentation": {}
    },
    {
        "label": "DocumentService",
        "importPath": "gpt_user.documents.services.documents",
        "description": "gpt_user.documents.services.documents",
        "isExtraImport": true,
        "detail": "gpt_user.documents.services.documents",
        "documentation": {}
    },
    {
        "label": "Templates",
        "importPath": "gpt_base.documents.models.documents",
        "description": "gpt_base.documents.models.documents",
        "isExtraImport": true,
        "detail": "gpt_base.documents.models.documents",
        "documentation": {}
    },
    {
        "label": "WorkBooks",
        "importPath": "gpt_base.documents.models.documents",
        "description": "gpt_base.documents.models.documents",
        "isExtraImport": true,
        "detail": "gpt_base.documents.models.documents",
        "documentation": {}
    },
    {
        "label": "Documents",
        "importPath": "gpt_base.documents.models.documents",
        "description": "gpt_base.documents.models.documents",
        "isExtraImport": true,
        "detail": "gpt_base.documents.models.documents",
        "documentation": {}
    },
    {
        "label": "TemplateDetailListSerializer",
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "isExtraImport": true,
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "TemplateDetailSerializer",
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "isExtraImport": true,
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "WorkBookDetailListSerializer",
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "isExtraImport": true,
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "DocumentsCreateSerializer",
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "isExtraImport": true,
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "DocumentsDetailListSerializer",
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "isExtraImport": true,
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "DocumentsUpdateSerializer",
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "isExtraImport": true,
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "DocumentsDetailSerializer",
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "isExtraImport": true,
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "TemplatesViewSet",
        "importPath": "gpt_user.documents.views.view_set",
        "description": "gpt_user.documents.views.view_set",
        "isExtraImport": true,
        "detail": "gpt_user.documents.views.view_set",
        "documentation": {}
    },
    {
        "label": "WorkBooksViewSet",
        "importPath": "gpt_user.documents.views.view_set",
        "description": "gpt_user.documents.views.view_set",
        "isExtraImport": true,
        "detail": "gpt_user.documents.views.view_set",
        "documentation": {}
    },
    {
        "label": "DocumentsViewSet",
        "importPath": "gpt_user.documents.views.view_set",
        "description": "gpt_user.documents.views.view_set",
        "isExtraImport": true,
        "detail": "gpt_user.documents.views.view_set",
        "documentation": {}
    },
    {
        "label": "process_generate_document",
        "importPath": "gpt_user.documents.views.view_api",
        "description": "gpt_user.documents.views.view_api",
        "isExtraImport": true,
        "detail": "gpt_user.documents.views.view_api",
        "documentation": {}
    },
    {
        "label": "GingerIt",
        "importPath": "gingerit.gingerit",
        "description": "gingerit.gingerit",
        "isExtraImport": true,
        "detail": "gingerit.gingerit",
        "documentation": {}
    },
    {
        "label": "view_api",
        "importPath": "gpt_user.grammarly.views",
        "description": "gpt_user.grammarly.views",
        "isExtraImport": true,
        "detail": "gpt_user.grammarly.views",
        "documentation": {}
    },
    {
        "label": "RegisterMembersSerializer",
        "importPath": "gpt_user.members.serializers.registration",
        "description": "gpt_user.members.serializers.registration",
        "isExtraImport": true,
        "detail": "gpt_user.members.serializers.registration",
        "documentation": {}
    },
    {
        "label": "RegisterMembersSerializer",
        "importPath": "gpt_user.members.serializers.registration",
        "description": "gpt_user.members.serializers.registration",
        "isExtraImport": true,
        "detail": "gpt_user.members.serializers.registration",
        "documentation": {}
    },
    {
        "label": "MemberRegistrationService",
        "importPath": "gpt_user.members.services.registration",
        "description": "gpt_user.members.services.registration",
        "isExtraImport": true,
        "detail": "gpt_user.members.services.registration",
        "documentation": {}
    },
    {
        "label": "view_api",
        "importPath": "gpt_user.members.views",
        "description": "gpt_user.members.views",
        "isExtraImport": true,
        "detail": "gpt_user.members.views",
        "documentation": {}
    },
    {
        "label": "Prompts",
        "importPath": "gpt_base.prompts.models.prompts",
        "description": "gpt_base.prompts.models.prompts",
        "isExtraImport": true,
        "detail": "gpt_base.prompts.models.prompts",
        "documentation": {}
    },
    {
        "label": "PromptsDetailListSerializer",
        "importPath": "gpt_user.prompts.serializers.prompts",
        "description": "gpt_user.prompts.serializers.prompts",
        "isExtraImport": true,
        "detail": "gpt_user.prompts.serializers.prompts",
        "documentation": {}
    },
    {
        "label": "PromptsCreateSerializer",
        "importPath": "gpt_user.prompts.serializers.prompts",
        "description": "gpt_user.prompts.serializers.prompts",
        "isExtraImport": true,
        "detail": "gpt_user.prompts.serializers.prompts",
        "documentation": {}
    },
    {
        "label": "PromptsUpdateSerializer",
        "importPath": "gpt_user.prompts.serializers.prompts",
        "description": "gpt_user.prompts.serializers.prompts",
        "isExtraImport": true,
        "detail": "gpt_user.prompts.serializers.prompts",
        "documentation": {}
    },
    {
        "label": "PromptViewSet",
        "importPath": "gpt_user.prompts.views.view_set",
        "description": "gpt_user.prompts.views.view_set",
        "isExtraImport": true,
        "detail": "gpt_user.prompts.views.view_set",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "isExtraImport": true,
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "env.bin.plac_runner",
        "description": "env.bin.plac_runner",
        "peekOfCode": "def run(fnames, cmd, verbose):\n    \"Run batch scripts and tests\"\n    for fname in fnames:\n        with open(fname) as f:\n            lines = list(f)\n        if not lines[0].startswith('#!'):\n            sys.exit('Missing or incorrect shebang line!')\n        firstline = lines[0][2:]  # strip the shebang\n        init_args = shlex.split(firstline)\n        tool = plac.import_main(*init_args)",
        "detail": "env.bin.plac_runner",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "env.bin.plac_runner",
        "description": "env.bin.plac_runner",
        "peekOfCode": "def main(verbose, interactive, multiline, serve, batch, test, fname='',\n         *extra):\n    \"Runner for plac tools, plac batch files and plac tests\"\n    baseparser = plac.parser_from(main)\n    if not fname:\n        baseparser.print_help()\n    elif sys.argv[1] == fname:  # script mode\n        plactool = plac.import_main(fname)\n        plactool.prog = os.path.basename(sys.argv[0]) + ' ' + fname\n        out = plac.call(plactool, sys.argv[2:], eager=False)",
        "detail": "env.bin.plac_runner",
        "documentation": {}
    },
    {
        "label": "main.add_help",
        "kind": 5,
        "importPath": "env.bin.plac_runner",
        "description": "env.bin.plac_runner",
        "peekOfCode": "main.add_help = False\nif __name__ == '__main__':\n    plac.call(main)",
        "detail": "env.bin.plac_runner",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "H = nx.cycle_graph(20)\n# reorder nodes from 0,len(G)-1\nG = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "G = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "xyz",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "xyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "scalars",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "scalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",\n    resolution=20,\n)",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts.mlab_source.dataset.lines",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts.mlab_source.dataset.lines = np.array(list(G.edges()))\ntube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "tube",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "tube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "G = nx.cycle_graph(20)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "node_xyz",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "node_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "edge_xyz",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "edge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "fig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "ax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off\n    ax.grid(False)",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "progressive_widening_search",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "def progressive_widening_search(G, source, value, condition, initial_width=1):\n    \"\"\"Progressive widening beam search to find a node.\n    The progressive widening beam search involves a repeated beam\n    search, starting with a small beam width then extending to\n    progressively larger beam widths if the target node is not\n    found. This implementation simply returns the first node found that\n    matches the termination condition.\n    `G` is a NetworkX graph.\n    `source` is a node in the graph. The search for the node of interest\n    begins here and extends only to those nodes in the (weakly)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "has_high_centrality",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "def has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "seed = 89\nG = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "centrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "avg_centrality",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "avg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "source",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "source = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "value = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "condition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "found_node",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "found_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "c = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "options = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red\nnx.draw_networkx_nodes(G, pos, nodelist=[found_node], node_size=100, node_color=\"r\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "G = nx.read_edgelist(\"WormNet.v3.benchmark.txt\")\n# remove randomly selected nodes (to make example fast)\nnum_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "num_to_remove",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "num_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "nodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "low_degree",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "low_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "components",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "components = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "largest_component",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "largest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "H = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "centrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "lpc",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "lpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "community_index",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "community_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "pos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font = {\"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 20}\nax.set_title(\"Gene functional association network (C. elegans)\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "create_hc",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "def create_hc(G):\n    \"\"\"Creates hierarchical cluster of graph G from distance matrix\"\"\"\n    path_length = nx.all_pairs_shortest_path_length(G)\n    distances = np.zeros((len(G), len(G)))\n    for u, p in path_length:\n        for v, d in p.items():\n            distances[u][v] = d\n    # Create hierarchical cluster\n    Y = distance.squareform(distances)\n    Z = hierarchy.complete(Y)  # Creates HC using farthest point linkage",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "G = nx.read_edgelist(\"hartford_drug.edgelist\")\n# Extract largest connected component into graph H\nH = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create partitions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create partitions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = nx.convert_node_labels_to_integers(H)\n# Create partitions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "partitions",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "partitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "BM",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "BM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "pos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "node_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "edge_width",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "edge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "posBM",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "posBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "circuit_to_formula",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "def circuit_to_formula(circuit):\n    # Convert the circuit to an equivalent formula.\n    formula = nx.dag_to_branching(circuit)\n    # Transfer the operator or variable labels for each node from the\n    # circuit to the formula.\n    for v in formula:\n        source = formula.nodes[v][\"source\"]\n        formula.nodes[v][\"label\"] = circuit.nodes[source][\"label\"]\n    return formula\ndef formula_to_string(formula):",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula_to_string",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "def formula_to_string(formula):\n    def _to_string(formula, root):\n        # If there are no children, this is a variable node.\n        label = formula.nodes[root][\"label\"]\n        if not formula[root]:\n            return label\n        # Otherwise, this is an operator.\n        children = formula[root]\n        # If one child, the label must be a NOT operator.\n        if len(children) == 1:",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "circuit",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "circuit = nx.DiGraph()\n# Layer 0\ncircuit.add_node(0, label=\"∧\", layer=0)\n# Layer 1\ncircuit.add_node(1, label=\"∨\", layer=1)\ncircuit.add_node(2, label=\"∨\", layer=1)\ncircuit.add_edge(0, 1)\ncircuit.add_edge(0, 2)\n# Layer 2\ncircuit.add_node(3, label=\"x\", layer=2)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "formula = circuit_to_formula(circuit)\nprint(formula_to_string(formula))\nlabels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "labels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "options = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "pos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)\nplt.title(formula_to_string(formula))\nplt.axis(\"equal\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "G = nx.davis_southern_women_graph()\nwomen = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "women",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "women = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "clubs",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "clubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurrence",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurrence\n# the degree computed is weighted and counts the total number of shared contacts\nW = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")\nfor w in women:\n    print(f\"{W.degree(w, weight='weight')} {w}\")\npos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "pos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "original_graph = nx.DiGraph()\nwhite_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "white_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "white_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "red_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "red_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),\n        (\"3\", \"B\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "base_options = {\"with_labels\": True, \"edgecolors\": \"black\"}\npos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "pos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),\n    \"5\": (2, 1),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\"Original (%s edges)\" % original_graph.number_of_edges())\nnx.draw_networkx(original_graph, pos=pos, node_color=node_colors, **base_options)\nnonexp_graph, compression_nodes = nx.summarization.dedensify(\n    original_graph, threshold=2, copy=False\n)\nnonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_sizes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0.75),\n    \"3\": (1.5, 1.5),\n    \"A\": (2, 0),\n    \"C\": (2, 3),\n    \"4\": (3, 1.5),\n    \"2\": (3, 2.5),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "c_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "c_nodes = list(compression_nodes)\nc_nodes.sort()\nfor spot, node in enumerate(c_nodes):\n    nonexp_pos[node] = (2, spot + 2)\nnx.draw_networkx(\n    nonexp_graph,\n    pos=nonexp_pos,\n    node_color=nonexp_node_colors,\n    node_size=nonexp_node_sizes,\n    **base_options,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "create_community_node_colors",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "def create_community_node_colors(graph, communities):\n    number_of_colors = len(communities[0])\n    colors = [\"#D4FCB1\", \"#CDC5FC\", \"#FFC2C4\", \"#F2D140\", \"#BCC6C8\"][:number_of_colors]\n    node_colors = []\n    for node in graph:\n        current_community_index = 0\n        for community in communities:\n            if node in community:\n                node_colors.append(colors[current_community_index])\n                break",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "visualize_communities",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "def visualize_communities(graph, communities, i):\n    node_colors = create_community_node_colors(graph, communities)\n    modularity = round(nx.community.modularity(graph, communities), 6)\n    title = f\"Community Visualization of {len(communities)} communities with modularity of {modularity}\"\n    pos = nx.spring_layout(graph, k=0.3, iterations=50, seed=2)\n    plt.subplot(3, 1, i)\n    plt.title(title)\n    nx.draw(\n        graph,\n        pos=pos,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "G = nx.karate_club_graph()\ncommunities = list(nx.community.girvan_newman(G))\n# Modularity -> measures the strength of division of a network into modules\nmodularity_df = pd.DataFrame(\n    [\n        [k + 1, nx.community.modularity(G, communities[k])]\n        for k in range(len(communities))\n    ],\n    columns=[\"k\", \"modularity\"],\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "communities",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "communities = list(nx.community.girvan_newman(G))\n# Modularity -> measures the strength of division of a network into modules\nmodularity_df = pd.DataFrame(\n    [\n        [k + 1, nx.community.modularity(G, communities[k])]\n        for k in range(len(communities))\n    ],\n    columns=[\"k\", \"modularity\"],\n)\n# function to create node colour list",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "modularity_df",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "modularity_df = pd.DataFrame(\n    [\n        [k + 1, nx.community.modularity(G, communities[k])]\n        for k in range(len(communities))\n    ],\n    columns=[\"k\", \"modularity\"],\n)\n# function to create node colour list\ndef create_community_node_colors(graph, communities):\n    number_of_colors = len(communities[0])",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "digitsrep",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist\n        # Floor-division",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "powersum",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def powersum(n, p, b=10):\n    \"\"\"Return sum of digits of n (in base b) raised to the power p.\"\"\"\n    dlist = digitsrep(n, b)\n    sum = 0\n    for k in dlist:\n        sum += k**p\n    return sum\ndef attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "attractor153_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        if k % multiple == 0 and k not in G:\n            k1 = k\n            knext = powersum(k1, p, b)\n            while k1 != knext:\n                G.add_edge(k1, knext)\n                k1 = knext",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_graph_old",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_graph_old(n, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,2,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        k1 = k\n        G.add_node(k1)  # case k1==knext, at least add node\n        knext = powersum(k1, 2, b)\n        G.add_edge(k1, knext)\n        while k1 != knext:  # stop if fixed point\n            k1 = knext",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "sum_of_digits_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def sum_of_digits_graph(nmax, b=10):\n    def f(n):\n        return powersum(n, 1, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_digraph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "cubing_153_digraph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "discrete_dynamics_digraph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)\n        G.add_edge(kold, knew)\n        while kold != knew and kold << itermax:\n            # iterate until fixed point reached or itermax is exceeded\n            kold = knew",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "collatz_problem_digraph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def collatz_problem_digraph(nmax):\n    def f(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n    return discrete_dynamics_digraph(nmax, f)\ndef fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "fixed_points",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.\n    \"\"\"\n    return [n for n in G if G.out_degree(n) == 0]\nnmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(108)",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(108) = 1**3 + 0**3 + 8**3 = 513\nand\nf(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(513)",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.\nThe smallest number that requires 13 iterations to reach 153, is 177, i.e.,\n177->687->1071->345->216->225->141->66->432->99->1458->702->351->153",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\np = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "p = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "G = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "G = nx.krackhardt_kite_graph()\nprint(\"Betweenness\")\nb = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "b = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "d = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "c = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "pos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "peekOfCode": "G = nx.Graph(\n    [\n        (1, 2),\n        (7, 2),\n        (3, 9),\n        (3, 2),\n        (7, 6),\n        (5, 2),\n        (1, 5),\n        (2, 8),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "peekOfCode": "I = approx.maximum_independent_set(G)\nprint(f\"Maximum independent set of G: {I}\")\npos = nx.spring_layout(G, seed=39299899)\nnx.draw(\n    G,\n    pos=pos,\n    with_labels=True,\n    node_color=[\"tab:red\" if n in I else \"tab:blue\" for n in G],\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "peekOfCode": "pos = nx.spring_layout(G, seed=39299899)\nnx.draw(\n    G,\n    pos=pos,\n    with_labels=True,\n    node_color=[\"tab:red\" if n in I else \"tab:blue\" for n in G],\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def chunks(l, n):\n    \"\"\"Divide a list of nodes `l` in `n` chunks\"\"\"\n    l_c = iter(l)\n    while 1:\n        x = tuple(itertools.islice(l_c, n))\n        if not x:\n            return\n        yield x\ndef betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "betweenness_centrality_parallel",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"\n    p = Pool(processes=processes)\n    node_divisor = len(p._pool) * 4\n    node_chunks = list(chunks(G.nodes(), G.order() // node_divisor))\n    num_chunks = len(node_chunks)\n    bt_sc = p.starmap(\n        nx.betweenness_centrality_subset,\n        zip(\n            [G] * num_chunks,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ba",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ba = nx.barabasi_albert_graph(1000, 3)\nG_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(G)\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_er",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(G)\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ws",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(G)\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")\n    print(f\"\\t\\tBetweenness centrality for node 0: {bt[0]:.5f}\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "G = nx.grid_2d_graph(3, 3)\nrcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "rcm",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "rcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "A = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "B = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(B)\nsns.heatmap(B.todense(), cbar=False, square=True, linewidths=0.5, annot=True)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "nodes = {\n    \"A\": {\"color\": \"Red\"},\n    \"B\": {\"color\": \"Red\"},\n    \"C\": {\"color\": \"Red\"},\n    \"D\": {\"color\": \"Red\"},\n    \"E\": {\"color\": \"Blue\"},\n    \"F\": {\"color\": \"Blue\"},\n    \"G\": {\"color\": \"Blue\"},\n    \"H\": {\"color\": \"Blue\"},\n    \"I\": {\"color\": \"Yellow\"},",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edges = [\n    (\"A\", \"B\", \"Strong\"),\n    (\"A\", \"C\", \"Weak\"),\n    (\"A\", \"E\", \"Strong\"),\n    (\"A\", \"I\", \"Weak\"),\n    (\"B\", \"D\", \"Weak\"),\n    (\"B\", \"J\", \"Weak\"),\n    (\"B\", \"F\", \"Strong\"),\n    (\"C\", \"G\", \"Weak\"),\n    (\"D\", \"H\", \"Weak\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "original_graph = nx.Graph()\noriginal_graph.add_nodes_from(n for n in nodes.items())\noriginal_graph.add_edges_from((u, v, {\"type\": label}) for u, v, label in edges)\nplt.suptitle(\"SNAP Summarization\")\nbase_options = {\"with_labels\": True, \"edgecolors\": \"black\", \"node_size\": 500}\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "base_options = {\"with_labels\": True, \"edgecolors\": \"black\", \"node_size\": 500}\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "pos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_type_visual_weight_lookup",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_attributes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "node_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_attributes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_graph",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "summary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "summary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]\n    edge_weights.append(edge_weight)\nnx.draw_networkx(\n    summary_graph,\n    pos=summary_pos,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "graph_partitioning",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "def graph_partitioning(G, plotting=True):\n    \"\"\"Partition a directed graph into a list of subgraphs that contain\n    only entirely supported or entirely unsupported nodes.\n    \"\"\"\n    # Categorize nodes by their node_type attribute\n    supported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"supported\"}\n    unsupported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"unsupported\"}\n    # Make a copy of the graph.\n    H = G.copy()\n    # Remove all edges connecting supported and unsupported nodes.",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex = nx.DiGraph()\nG_ex.add_nodes_from([\"In\"], node_type=\"input\", node_color=\"b\")\nG_ex.add_nodes_from([\"A\", \"C\", \"E\", \"F\"], node_type=\"supported\", node_color=\"g\")\nG_ex.add_nodes_from([\"B\", \"D\"], node_type=\"unsupported\", node_color=\"r\")\nG_ex.add_nodes_from([\"Out\"], node_type=\"output\", node_color=\"m\")\nG_ex.add_edges_from(\n    [\n        (\"In\", \"A\"),\n        (\"A\", \"B\"),\n        (\"B\", \"C\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################\n# Calculate the subgraphs with plotting all results of intemediate steps.",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex_r",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex_r = nx.DiGraph()\n# Composing all subgraphs.\nfor subgraph in subgraphs_of_G_ex:\n    G_ex_r = nx.compose(G_ex_r, subgraph)\n# Adding the previously stored edges.\nG_ex_r.add_edges_from(removed_edges.edges())\n###############################################################################\n# Check that the original graph and the reconstructed graphs are isomorphic.\n# --------------------------------------------------------------------------\n#",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex_r.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "G = nx.lollipop_graph(4, 6)\npathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pathlengths",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "pathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")\n# histogram of path lengths",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "dist = {}\nfor p in pathlengths:\n    if p in dist:\n        dist[p] += 1\n    else:\n        dist[p] = 1\nprint()\nprint(\"length #paths\")\nverts = dist.keys()\nfor d in sorted(verts):",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "verts",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "verts = dist.keys()\nfor d in sorted(verts):\n    print(f\"{d} {dist[d]}\")\nprint(f\"radius: {nx.radius(G)}\")\nprint(f\"diameter: {nx.diameter(G)}\")\nprint(f\"eccentricity: {nx.eccentricity(G)}\")\nprint(f\"center: {nx.center(G)}\")\nprint(f\"periphery: {nx.periphery(G)}\")\nprint(f\"density: {nx.density(G)}\")\npos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility\nnx.draw(G, pos=pos, with_labels=True)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "peekOfCode": "G = nx.grid_2d_graph(5, 5)  # 5x5 grid\n# print the adjacency list\nfor line in nx.generate_adjlist(G):\n    print(line)\n# write edgelist to grid.edgelist\nnx.write_edgelist(G, path=\"grid.edgelist\", delimiter=\":\")\n# read edgelist from grid.edgelist\nH = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "peekOfCode": "H = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "peekOfCode": "pos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(1, 2)\nG.add_edge(1, 3)\nG.add_edge(1, 5)\nG.add_edge(2, 3)\nG.add_edge(3, 4)\nG.add_edge(4, 5)\n# explicitly set positions\npos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "options = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()\n# %%\n# A directed graph\nG = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "left_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "left_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "middle_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "middle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "right_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "right_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "G = nx.path_graph(20)  # An example graph\ncenter_node = 5  # Or any other node to be in the center\nedge_nodes = set(G) - {center_node}\n# Ensures the nodes around the circle are evenly distributed\npos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "center_node",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "center_node = 5  # Or any other node to be in the center\nedge_nodes = set(G) - {center_node}\n# Ensures the nodes around the circle are evenly distributed\npos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "edge_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "edge_nodes = set(G) - {center_node}\n# Ensures the nodes around the circle are evenly distributed\npos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "pos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "pos[center_node]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "pos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "chess_pgn_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "def chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}\n    with bz2.BZ2File(pgn_file) as datafile:",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "game_details",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "game_details = [\"Event\", \"Date\", \"Result\", \"ECO\", \"Site\"]\ndef chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "G = chess_pgn_graph()\nprint(\n    f\"Loaded {G.number_of_edges()} chess games between {G.number_of_nodes()} players\\n\"\n)\n# identify connected components of the undirected version\nH = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor white, black, game_info in G.edges(data=True):",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "Gcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor white, black, game_info in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "openings",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "openings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor white, black, game_info in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":\n        summary = f\"{white} vs {black}\\n\"\n        for k, v in game_info.items():\n            summary += f\"   {k}: {v}\\n\"\n        summary += \"\\n\"",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = nx.Graph(G)\n# edge width is proportional number of games played\nedgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor u, v, d in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "edgewidth",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "edgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor u, v, d in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "wins",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "wins = dict.fromkeys(G.nodes(), 0.0)\nfor u, v, d in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5\n    else:\n        wins[v] += 1.0",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "nodesize",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "nodesize = [wins[v] * 50 for v in H]\n# Generate layout for visualization\npos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")\nnx.draw_networkx_nodes(H, pos, node_size=nodesize, node_color=\"#210070\", alpha=0.9)\nlabel_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "label_options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "label_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}\nnx.draw_networkx_labels(H, pos, font_size=14, bbox=label_options)\n# Title/legend\nfont = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "font = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "icons",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icons = {\n    \"router\": \"icons/router_black_144x144.png\",\n    \"switch\": \"icons/switch_black_144x144.png\",\n    \"PC\": \"icons/computer_black_144x144.png\",\n}\n# Load images\nimages = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "images = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "G = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")\nG.add_edge(\"router\", \"switch_3\")\nfor u in range(1, 4):",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1734289230)\nfig, ax = plt.subplots()\n# Note: the min_source/target_margin kwargs only work with FancyArrowPatch objects.\n# Force the use of FancyArrowPatch for edge drawing by setting `arrows=True`,\n# but suppress arrowheads with `arrowstyle=\"-\"`\nnx.draw_networkx_edges(\n    G,\n    pos=pos,\n    ax=ax,\n    arrows=True,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_figure",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_figure = ax.transData.transform\n# Transform from display to figure coordinates\ntr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_axes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_size",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_center",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.02, seed=10374196)\ndegree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "degree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "dmax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "dmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "fig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "axgrid",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "axgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax0",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "ax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "pos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "ax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")\nax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "ax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")\nfig.tight_layout()\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "seed = 13648  # Seed random number generators for reproducibility\nG = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "G = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "node_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "M = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "edge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_alphas",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "edge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "cmap",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "cmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "nodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "edges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,\n)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "pc = mpl.collections.PatchCollection(edges, cmap=cmap)\npc.set_array(edge_colors)\nax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "ax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "G = nx.star_graph(20)\npos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "pos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "colors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "options = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "n = 1000\nm = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "m = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "seed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "G = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "node_and_degree",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "node_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "hub_ego",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "hub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "pos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "options = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "n = 1000  # 1000 nodes\nm = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "m = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "L = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "e = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "G = nx.grid_2d_graph(4, 4)  # 4x4 grid\npos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "ax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],\n    node_color=\"tab:green\",\n    edgecolors=\"tab:gray\",  # Node surface color\n    edge_color=\"tab:gray\",  # Color of graph edges",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "H = G.to_directed()\nnx.draw(\n    H,\n    pos,\n    ax=ax[3],\n    node_color=\"tab:orange\",\n    node_size=20,\n    with_labels=False,\n    arrowsize=10,\n    width=2,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "G = nx.house_graph()\n# explicitly set positions\npos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "pos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes\nax = plt.gca()\nax.margins(0.11)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.11)\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\"Return the cites example graph in miles_dat.txt\n    from the Stanford GraphBase.\n    \"\"\"\n    # open file miles_dat.txt.gz (or miles_dat.txt)\n    fh = gzip.open(\"knuth_miles.txt.gz\", \"r\")\n    G = nx.Graph()\n    G.position = {}\n    G.population = {}\n    cities = []",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "G = miles_graph()\nprint(\"Loaded miles_dat.txt containing 128 cities.\")\nprint(G)\n# make new graph of cites, edge if less then 300 miles between them\nH = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor u, v, d in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "H = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor u, v, d in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)\n# draw with matplotlib/pylab\nfig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "fig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "node_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop\n    for shapename in (\"admin_1_states_provinces_lakes_shp\", \"admin_0_countries\"):\n        shp = shpreader.natural_earth(",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "G = nx.cubical_graph()\npos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "options = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,\n    edgelist=[(0, 1), (1, 2), (2, 3), (3, 0)],\n    width=8,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels = {}\nlabels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[0]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[1]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[2]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[3]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[4]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[5]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[6]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[7]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "multilayered_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "def multilayered_graph(*subset_sizes):\n    extents = nx.utils.pairwise(itertools.accumulate((0,) + subset_sizes))\n    layers = [range(start, end) for start, end in extents]\n    G = nx.Graph()\n    for i, layer in enumerate(layers):\n        G.add_nodes_from(layer, layer=i)\n    for layer1, layer2 in nx.utils.pairwise(layers):\n        G.add_edges_from(itertools.product(layer1, layer2))\n    return G\nG = multilayered_graph(*subset_sizes)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_sizes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_sizes = [5, 5, 4, 3, 2, 4, 4, 3]\nsubset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_color",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",\n]",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "G = multilayered_graph(*subset_sizes)\ncolor = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "color = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "peekOfCode": "G = nx.cycle_graph(24)\npos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "peekOfCode": "pos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "def cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_dist_to_color",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_dist_to_color = {\n    1: \"tab:red\",\n    2: \"tab:orange\",\n    3: \"tab:olive\",\n    4: \"tab:green\",\n    5: \"tab:blue\",\n    6: \"tab:purple\",\n}\n# Create a complete graph with an odd number of nodes\nnnodes = 13",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nnodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nnodes = 13\nG = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "G = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "n = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "ndist_iter",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "ndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "pos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_opts",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "edge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "G = nx.random_geometric_graph(200, 0.125, seed=896803)\n# position is stored as node attribute data for random_geometric_graph\npos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "dmin",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "dmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "ncenter",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "ncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "p = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G, pos, alpha=0.4)\nnx.draw_networkx_nodes(\n    G,\n    pos,\n    nodelist=list(p.keys()),\n    node_size=80,\n    node_color=list(p.values()),\n    cmap=plt.cm.Reds_r,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "G1",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "G1 = nx.read_edgelist(e1, delimiter=\"\\t\")\nG2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G2",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "G2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G3",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "G3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "pos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)\nplt.title(\"samplike3\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "peekOfCode": "G = nx.complete_graph(3, create_using=nx.DiGraph)\nG.add_edge(0, 0)\npos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "peekOfCode": "pos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "edgelist",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "peekOfCode": "edgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "peekOfCode": "G = nx.path_graph(8)\npos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "peekOfCode": "pos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "peekOfCode": "options = {\"node_color\": \"C0\", \"node_size\": 100}\nG = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "peekOfCode": "G = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (3, 2))",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "G = nx.random_geometric_graph(20, radius=0.4, seed=3)\npos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos[0]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "pos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "H = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "cycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "edge_list",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "edge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,\n    edge_color=\"red\",",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "mbox_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "def mbox_graph():\n    mbox = mailbox.mbox(\"unix_email.mbox\")  # parse unix mailbox\n    G = nx.MultiDiGraph()  # create empty graph\n    # parse each messages and build graph\n    for msg in mbox:  # msg is python email.Message.Message object\n        (source_name, source_addr) = parseaddr(msg[\"From\"])  # sender\n        # get all recipients\n        # see https://docs.python.org/3/library/email.html\n        tos = msg.get_all(\"to\", [])\n        ccs = msg.get_all(\"cc\", [])",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "G = mbox_graph()\n# print edges with message subject\nfor u, v, d in G.edges(data=True):\n    print(f\"From: {u} To: {v} Subject: {d['message']['Subject']}\")\npos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(\"a\", \"b\", weight=0.6)\nG.add_edge(\"a\", \"c\", weight=0.2)\nG.add_edge(\"c\", \"d\", weight=0.1)\nG.add_edge(\"c\", \"e\", weight=0.7)\nG.add_edge(\"c\", \"f\", weight=0.9)\nG.add_edge(\"a\", \"d\", weight=0.3)\nelarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "elarge",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "elarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "esmall",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "esmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels\nnx.draw_networkx_labels(G, pos, font_size=20, font_family=\"sans-serif\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "edge_labels",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "edge_labels = nx.get_edge_attributes(G, \"weight\")\nnx.draw_networkx_edge_labels(G, pos, edge_labels)\nax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "peekOfCode": "G = nx.DiGraph(\n    [\n        (\"f\", \"a\"),\n        (\"a\", \"b\"),\n        (\"a\", \"e\"),\n        (\"b\", \"c\"),\n        (\"b\", \"d\"),\n        (\"d\", \"e\"),\n        (\"f\", \"c\"),\n        (\"f\", \"g\"),",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nfig, ax = plt.subplots()\nnx.draw_networkx(G, pos=pos, ax=ax)\nax.set_title(\"DAG layout in topological order\")\nfig.tight_layout()\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "seed = 668273\nz = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(\n    z, seed=seed\n)  # configuration model, seed for reproducibility\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "z = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(\n    z, seed=seed\n)  # configuration model, seed for reproducibility\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "G = nx.configuration_model(\n    z, seed=seed\n)  # configuration model, seed for reproducibility\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "degree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "hist",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "hist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")\nfor d in hist:\n    print(f\"{d:4} {hist[d]:6}\")\npos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "n = 10  # 10 nodes\nm = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "m = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "seed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):\n    print(line)\npos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "n = 500  # n nodes\np = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "p = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "w = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "G = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "dh",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "dh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "url = \"http://www-personal.umich.edu/~mejn/netdata/football.zip\"\nsock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "sock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "s = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "zf",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "zf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "txt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "gml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "gml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "G = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "options = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_karate_club",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_karate_club",
        "peekOfCode": "G = nx.karate_club_graph()\nprint(\"Node Degree\")\nfor v in G:\n    print(f\"{v:4} {G.degree(v):6}\")\nnx.draw_circular(G, with_labels=True)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_karate_club",
        "documentation": {}
    },
    {
        "label": "morse_encode",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "def morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol\n# Verify that the trie encoding is correct\nimport string\nfor letter in string.ascii_lowercase:\n    assert morse_encode(letter) == morse_direct_mapping[letter]",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dot",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "dot = \"•\"\ndash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dash",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "dash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_direct_mapping",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,\n    \"h\": dot * 4,\n    \"i\": dot * 2,",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_mapping_sorted",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_mapping_sorted = dict(\n    sorted(morse_direct_mapping.items(), key=lambda item: (len(item[1]), item[1]))\n)\n# More preprocessing: create the reverse mapping to simplify lookup\nreverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping[\"\"]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "G = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:\n        G.nodes[n][\"layer\"] = i\npos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")\n# Flip the layout so the root node is on top\nfor k in pos:\n    pos[k][-1] *= -1\n# Visualize the trie\nnx.draw(G, pos=pos, with_labels=True)\nelabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "elabels",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "elabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node\ndef morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "peekOfCode": "G = nx.Graph()\nG.add_edges_from(\n    [\n        (0, 1, {\"weight\": 4}),\n        (0, 7, {\"weight\": 8}),\n        (1, 7, {\"weight\": 11}),\n        (1, 2, {\"weight\": 8}),\n        (2, 8, {\"weight\": 2}),\n        (2, 5, {\"weight\": 4}),\n        (2, 3, {\"weight\": 7}),",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "peekOfCode": "T = nx.minimum_spanning_tree(G)\n# Visualize the graph and the minimum spanning tree\npos = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, pos, node_color=\"lightblue\", node_size=500)\nnx.draw_networkx_edges(G, pos, edge_color=\"grey\")\nnx.draw_networkx_labels(G, pos, font_size=12, font_family=\"sans-serif\")\nnx.draw_networkx_edge_labels(\n    G, pos, edge_labels={(u, v): d[\"weight\"] for u, v, d in G.edges(data=True)}\n)\nnx.draw_networkx_edges(T, pos, edge_color=\"green\", width=2)",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "peekOfCode": "pos = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, pos, node_color=\"lightblue\", node_size=500)\nnx.draw_networkx_edges(G, pos, edge_color=\"grey\")\nnx.draw_networkx_labels(G, pos, font_size=12, font_family=\"sans-serif\")\nnx.draw_networkx_edge_labels(\n    G, pos, edge_labels={(u, v): d[\"weight\"] for u, v, d in G.edges(data=True)}\n)\nnx.draw_networkx_edges(T, pos, edge_color=\"green\", width=2)\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "documentation": {}
    },
    {
        "label": "minard_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "def minard_graph():\n    data1 = \"\"\"\\\n24.0,54.9,340000,A,1\n24.5,55.0,340000,A,1\n25.5,54.5,340000,A,1\n26.0,54.7,320000,A,1\n27.0,54.8,300000,A,1\n28.0,54.9,280000,A,1\n28.5,55.0,240000,A,1\n29.0,55.1,210000,A,1",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "colors = [\"b\", \"g\", \"r\"]\nfor G in g:\n    c = colors.pop(0)\n    node_size = [G.pop[n] // 300 for n in G]\n    nx.draw_networkx_edges(G, G.pos, edge_color=c, width=4, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=node_size, node_color=c, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=5, node_color=\"k\")\nfor c in city:\n    x, y = city[c]\n    plt.text(x, y + 0.1, c)",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "roget_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "def roget_graph():\n    \"\"\"Return the thesaurus graph from the roget.dat example in\n    the Stanford Graph Base.\n    \"\"\"\n    # open file roget_dat.txt.gz\n    fh = gzip.open(\"roget_dat.txt.gz\", \"r\")\n    G = nx.DiGraph()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):  # skip comments",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "G = roget_graph()\nprint(\"Loaded roget_dat.txt containing 1022 categories.\")\nprint(G)\nUG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "UG",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "UG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "triads",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_triad_types",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_triad_types",
        "peekOfCode": "triads = {\n    \"003\": [],\n    \"012\": [(1, 2)],\n    \"102\": [(1, 2), (2, 1)],\n    \"021D\": [(3, 1), (3, 2)],\n    \"021U\": [(1, 3), (2, 3)],\n    \"021C\": [(1, 3), (3, 2)],\n    \"111D\": [(1, 2), (2, 1), (3, 1)],\n    \"111U\": [(1, 2), (2, 1), (1, 3)],\n    \"030T\": [(1, 2), (3, 2), (1, 3)],",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_triad_types",
        "documentation": {}
    },
    {
        "label": "generate_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "def generate_graph(words):\n    G = nx.Graph(name=\"words\")\n    lookup = {c: lowercase.index(c) for c in lowercase}\n    def edit_distance_one(word):\n        for i in range(len(word)):\n            left, c, right = word[0:i], word[i], word[i + 1 :]\n            j = lookup[c]  # lowercase.index(c)\n            for cc in lowercase[j + 1 :]:\n                yield left + cc + right\n    candgen = (",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "words_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "def words_graph():\n    \"\"\"Return the words example graph from the Stanford GraphBase\"\"\"\n    fh = gzip.open(\"words_dat.txt.gz\", \"r\")\n    words = set()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):\n            continue\n        w = str(line[0:5])\n        words.add(w)",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "G = words_graph()\nprint(\"Loaded words_dat.txt containing 5757 five-letter English words.\")\nprint(\"Two words are connected if they differ in one letter.\")\nprint(G)\nprint(f\"{nx.number_connected_components(G)} connected components\")\nfor source, target in [(\"chaos\", \"order\"), (\"nodes\", \"graph\"), (\"pound\", \"marks\")]:\n    print(f\"Shortest path between {source} and {target} is\")\n    try:\n        shortest_path = nx.shortest_path(G, source, target)\n        for n in shortest_path:",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "boundary",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "boundary = list(nx.node_boundary(G, shortest_path))\nG.add_nodes_from(shortest_path, color=\"red\")\nG.add_nodes_from(boundary, color=\"blue\")\nH = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "H = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "colors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "options = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "AntiGraph",
        "kind": 6,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "class AntiGraph(Graph):\n    \"\"\"\n    Class for complement graphs.\n    The main goal is to be able to work with big and dense graphs with\n    a low memory footprint.\n    In this class you add the edges that *do not exist* in the dense graph,\n    the report methods of the class return the neighbors, the edges and\n    the degree as if it was the dense graph. Thus it's possible to use\n    an instance of this class with some of NetworkX functions.\n    \"\"\"",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gnp",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gnp = nx.gnp_random_graph(20, 0.8, seed=42)\nAnp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Anp",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Anp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gd",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ad",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Ad = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gk",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ak",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Ak = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "pairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.biconnected_components(G)]",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=268)  # Seed for reproducible layout\nnx.draw(Gnp, pos=pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "PrintGraph",
        "kind": 6,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "class PrintGraph(Graph):\n    \"\"\"\n    Example subclass of the Graph class.\n    Prints activity log to file or standard output.\n    \"\"\"\n    def __init__(self, data=None, name=\"\", file=None, **attr):\n        super().__init__(data=data, name=name, **attr)\n        if file is None:\n            import sys\n            self.fh = sys.stdout",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nG.add_node(\"foo\")\nG.add_nodes_from(\"bar\", weight=8)\nG.remove_node(\"b\")\nG.remove_nodes_from(\"ar\")\nprint(\"Nodes in G: \", G.nodes(data=True))\nG.add_edge(0, 1, weight=10)\nprint(\"Edges in G: \", G.edges(data=True))\nG.remove_edge(0, 1)\nG.add_edges_from(zip(range(0, 3), range(1, 4)), weight=10)",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nnx.add_path(G, range(10))\nnx.add_star(G, range(9, 13))\npos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "forgot_password",
        "kind": 2,
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "peekOfCode": "def forgot_password(request):\n    auth_service = AuthService()\n    data = auth_service.forgot_password(request.data)\n    return Response(data=data)\n@extend_schema(\n    methods=['POST'],\n    tags=['auth'],\n    request=ResetPasswordSerializer,\n    description='reset password',\n    responses={200: {}}",
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "reset_password",
        "kind": 2,
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "peekOfCode": "def reset_password(request):\n    auth_service = AuthService()\n    data = auth_service.reset_password(request.data)\n    return Response(data=data)\n@extend_schema(\n    methods=['PUT'],\n    tags=['auth'],\n    request=ChangePasswordSerializer,\n    description='change password',\n    responses={200: {}}",
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "peekOfCode": "def change_password(request):\n    auth_service = AuthService()\n    data = auth_service.change_password(request.user, request.data)\n    return Response(data=data)\n@extend_schema(\n    methods=['GET'],\n    tags=['auth'],\n    description='get me',\n    responses={200: {}}\n)",
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "get_me",
        "kind": 2,
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "peekOfCode": "def get_me(request):\n    auth_service = AuthService()\n    data = auth_service.get_me(request.user)\n    return Response(data=data)\n@extend_schema(\n    methods=['POST'],\n    tags=['auth'],\n    request=VerifyMailSerializer,\n    description='verify email',\n    responses={200: {}}",
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "verify_email",
        "kind": 2,
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "peekOfCode": "def verify_email(request):\n    auth_service = AuthService()\n    data = auth_service.verify_mail(request.data)\n    return Response(data=data)\n@extend_schema(\n    methods=['POST'],\n    tags=['auth'],\n    request=ResendVerifyEmailSerializer,\n    description='Resend verify email',\n    responses={200: {}}",
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "resend_verify_email",
        "kind": 2,
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "peekOfCode": "def resend_verify_email(request):\n    auth_service = AuthService()\n    data = auth_service.resend_verify_email(request.data)\n    return Response(data=data)\n@extend_schema(\n    methods=['PUT'],\n    tags=['auth'],\n    request=ChangeEmailLoginSerializer,\n    description='change email login',\n    responses={200: {}}",
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "change_email_login",
        "kind": 2,
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "peekOfCode": "def change_email_login(request):\n    auth_service = AuthService()\n    auth_service.change_email_login(request.user, request.data)\n    return Response(data={})\n@extend_schema(\n    methods=['POST'],\n    tags=['auth'],\n    request=ConfirmChangeEmailLoginSerializer,\n    description='confirm change email login',\n    responses={200: {}}",
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "confirm_change_email_login",
        "kind": 2,
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "peekOfCode": "def confirm_change_email_login(request):\n    auth_service = AuthService()\n    data = auth_service.confirm_change_mail_login(request.data)\n    return Response(data=data)\n@extend_schema(\n    methods=['POST'],\n    tags=['auth'],\n    request=CheckVerifyTokenSerializer,\n    description='Check verify token valid or not',\n    responses={204: None}",
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "check_verify_token",
        "kind": 2,
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "peekOfCode": "def check_verify_token(request):\n    auth_service = AuthService()\n    auth_service.check_verify_token(request.data)\n    return Response(status=status.HTTP_200_OK, data=dict(message=\"ok\"))\n@api_view([\"POST\"])\n@permission_classes([AllowAny])\ndef check_session(request):\n    return Response(status=status.HTTP_200_OK, data={\n        \"data\": {\n            \"auth\": True,",
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "check_session",
        "kind": 2,
        "importPath": "gpt_base.auth.views.view_api",
        "description": "gpt_base.auth.views.view_api",
        "peekOfCode": "def check_session(request):\n    return Response(status=status.HTTP_200_OK, data={\n        \"data\": {\n            \"auth\": True,\n            \"model\": \"ChatGPTAPI\"\n        },\n        \"message\": \"\",\n        \"status\": \"Success\",\n    })",
        "detail": "gpt_base.auth.views.view_api",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairView",
        "kind": 6,
        "importPath": "gpt_base.auth.views.view_set",
        "description": "gpt_base.auth.views.view_set",
        "peekOfCode": "class CustomTokenObtainPairView(TokenObtainPairView):\n    # Replace the serializer with your custom\n    serializer_class = CustomTokenObtainPairSerializer\nclass CustomTokenRefreshView(TokenViewBase):\n    serializer_class = CustomTokenRefreshSerializer\n    def post(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        try:\n            serializer.is_valid(raise_exception=True)\n        except TokenError as e:",
        "detail": "gpt_base.auth.views.view_set",
        "documentation": {}
    },
    {
        "label": "CustomTokenRefreshView",
        "kind": 6,
        "importPath": "gpt_base.auth.views.view_set",
        "description": "gpt_base.auth.views.view_set",
        "peekOfCode": "class CustomTokenRefreshView(TokenViewBase):\n    serializer_class = CustomTokenRefreshSerializer\n    def post(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        try:\n            serializer.is_valid(raise_exception=True)\n        except TokenError as e:\n            raise CustomerInvalidToken(e.args[0])\n        return Response(serializer.validated_data, status=status.HTTP_200_OK)",
        "detail": "gpt_base.auth.views.view_set",
        "documentation": {}
    },
    {
        "label": "IsTokenValid",
        "kind": 6,
        "importPath": "gpt_base.auth.permission_class",
        "description": "gpt_base.auth.permission_class",
        "peekOfCode": "class IsTokenValid(BasePermission):\n    \"\"\"\n    Allows access only to user in token is exists.\n    \"\"\"\n    message = {'message': 'Token is invalid or expired.'}\n    def has_permission(self, request, view):\n        return request.user\ndef is_authenticated(request):\n    return request.user.is_authenticated\nclass IsUserAuthenticated(IsAuthenticated):",
        "detail": "gpt_base.auth.permission_class",
        "documentation": {}
    },
    {
        "label": "IsUserAuthenticated",
        "kind": 6,
        "importPath": "gpt_base.auth.permission_class",
        "description": "gpt_base.auth.permission_class",
        "peekOfCode": "class IsUserAuthenticated(IsAuthenticated):\n    def has_permission(self, request, view):\n        return is_authenticated(request)",
        "detail": "gpt_base.auth.permission_class",
        "documentation": {}
    },
    {
        "label": "is_authenticated",
        "kind": 2,
        "importPath": "gpt_base.auth.permission_class",
        "description": "gpt_base.auth.permission_class",
        "peekOfCode": "def is_authenticated(request):\n    return request.user.is_authenticated\nclass IsUserAuthenticated(IsAuthenticated):\n    def has_permission(self, request, view):\n        return is_authenticated(request)",
        "detail": "gpt_base.auth.permission_class",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_base.auth.permission_class",
        "description": "gpt_base.auth.permission_class",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Custom permission for users in token is exists.\nclass IsTokenValid(BasePermission):\n    \"\"\"\n    Allows access only to user in token is exists.\n    \"\"\"\n    message = {'message': 'Token is invalid or expired.'}\n    def has_permission(self, request, view):\n        return request.user\ndef is_authenticated(request):",
        "detail": "gpt_base.auth.permission_class",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairSerializer",
        "kind": 6,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n    \"\"\"Customizes JWT default Serializer to add more information about user\"\"\"\n    def get_token(self, user, created_at=None):\n        token = super().get_token(user)\n        token[TokenObtainPairEnum.CREATED_AT_LABEL.value] = created_at\n        return token\n    def validate(self, attrs):\n        data = super().validate(attrs)\n        created_at = str(get_current_time())\n        refresh = self.get_token(self.user, created_at)",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "CustomTokenRefreshSerializer",
        "kind": 6,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "class CustomTokenRefreshSerializer(TokenRefreshSerializer):\n    \"\"\"\n    Inherit from `TokenRefreshSerializer` and touch the database\n    before re-issuing a new access token and ensure that the user\n    exists and is active.\n    \"\"\"\n    def validate(self, attrs):\n        token = token_backend.decode(attrs['refresh'])\n        try:\n            user = User.objects.exclude(delete_flag=True).get(pk=token['user_id'])",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordSerializer",
        "kind": 6,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "class ForgotPasswordSerializer(serializers.Serializer):\n    email = serializers.CharField(required=True)\nclass ResetPasswordSerializer(serializers.Serializer):\n    email = serializers.CharField(required=True)\n    token = serializers.CharField(required=True)\n    password = serializers.CharField(required=True)\n    def validate_password(self, password):\n        if not check_regex(RegexPattern.PASS_REGEX.value, password):\n            raise CustomAPIException(detail=\"invalid password\")\n        return password",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "ResetPasswordSerializer",
        "kind": 6,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "class ResetPasswordSerializer(serializers.Serializer):\n    email = serializers.CharField(required=True)\n    token = serializers.CharField(required=True)\n    password = serializers.CharField(required=True)\n    def validate_password(self, password):\n        if not check_regex(RegexPattern.PASS_REGEX.value, password):\n            raise CustomAPIException(detail=\"invalid password\")\n        return password\nclass ChangePasswordSerializer(serializers.Serializer):\n    new_password = serializers.CharField(required=True)",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "ChangePasswordSerializer",
        "kind": 6,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "class ChangePasswordSerializer(serializers.Serializer):\n    new_password = serializers.CharField(required=True)\n    old_password = serializers.CharField(required=True)\n    def validate_new_password(self, new_password):\n        user = self.context.get(DBFieldsCommon.USER.value)\n        if not check_regex(RegexPattern.PASS_REGEX.value, new_password):\n            raise CustomAPIException(detail=\"Invalid new password\")\n        if new_password == user.email:\n            raise CustomAPIException(detail=\"Cannot matches password and email\")\n        return new_password",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "VerifyMailSerializer",
        "kind": 6,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "class VerifyMailSerializer(serializers.Serializer):\n    token = serializers.CharField(required=True)\n    email = serializers.CharField(required=True)\nclass ChangeEmailLoginSerializer(serializers.Serializer):\n    new_email = serializers.EmailField(required=True)\n    def validate_new_email(self, new_email):\n        user = get_current_user()\n        if user.email == new_email:\n            raise CustomAPIException(detail=message_code.I_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING)\n        user = User.objects.filter(email=new_email).first()",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "ChangeEmailLoginSerializer",
        "kind": 6,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "class ChangeEmailLoginSerializer(serializers.Serializer):\n    new_email = serializers.EmailField(required=True)\n    def validate_new_email(self, new_email):\n        user = get_current_user()\n        if user.email == new_email:\n            raise CustomAPIException(detail=message_code.I_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING)\n        user = User.objects.filter(email=new_email).first()\n        if user:\n            raise CustomAPIException(detail=\"Email already exists\")\n        return new_email",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "ConfirmChangeEmailLoginSerializer",
        "kind": 6,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "class ConfirmChangeEmailLoginSerializer(serializers.Serializer):\n    current_email = serializers.CharField(required=True)\n    token = serializers.CharField(required=True)\n    def validate(self, attrs):\n        current_email = crypto.decrypt(attrs.get(\"current_email\"))\n        token = attrs.get(\"token\")\n        user_model = User\n        try:\n            user = user_model.objects.filter(email=current_email).first()\n            if not TokenGenerator.check_token(user, token):",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "CheckVerifyTokenSerializer",
        "kind": 6,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "class CheckVerifyTokenSerializer(serializers.Serializer):\n    email = serializers.CharField(required=True)\n    token = serializers.CharField(required=True)\n    def validate(self, attrs):\n        email = crypto.decrypt(attrs.get(\"email\"))\n        token = attrs.get(\"token\")\n        try:\n            user_model = User\n            user = user_model.objects.filter(email=email).first()\n            if not TokenGenerator.check_token(user, token):",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "ResendVerifyEmailSerializer",
        "kind": 6,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "class ResendVerifyEmailSerializer(serializers.Serializer):\n    email = serializers.CharField(required=True)",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "TokenGenerator",
        "kind": 5,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "TokenGenerator = PasswordResetTokenGenerator()\ncrypto = FieldCrypto(settings.EMAIL_CRYPTO_FIELD_KEY)\nlogger = logging.getLogger(__name__)\nclass CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n    \"\"\"Customizes JWT default Serializer to add more information about user\"\"\"\n    def get_token(self, user, created_at=None):\n        token = super().get_token(user)\n        token[TokenObtainPairEnum.CREATED_AT_LABEL.value] = created_at\n        return token\n    def validate(self, attrs):",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "crypto",
        "kind": 5,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "crypto = FieldCrypto(settings.EMAIL_CRYPTO_FIELD_KEY)\nlogger = logging.getLogger(__name__)\nclass CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n    \"\"\"Customizes JWT default Serializer to add more information about user\"\"\"\n    def get_token(self, user, created_at=None):\n        token = super().get_token(user)\n        token[TokenObtainPairEnum.CREATED_AT_LABEL.value] = created_at\n        return token\n    def validate(self, attrs):\n        data = super().validate(attrs)",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_base.auth.serializers",
        "description": "gpt_base.auth.serializers",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n    \"\"\"Customizes JWT default Serializer to add more information about user\"\"\"\n    def get_token(self, user, created_at=None):\n        token = super().get_token(user)\n        token[TokenObtainPairEnum.CREATED_AT_LABEL.value] = created_at\n        return token\n    def validate(self, attrs):\n        data = super().validate(attrs)\n        created_at = str(get_current_time())",
        "detail": "gpt_base.auth.serializers",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "kind": 6,
        "importPath": "gpt_base.auth.services",
        "description": "gpt_base.auth.services",
        "peekOfCode": "class AuthService:\n    def __init__(self):\n        super(AuthService, self).__init__()\n        # self._mail_service = MailService()\n        self.__crypto = FieldCrypto(settings.EMAIL_CRYPTO_FIELD_KEY)\n    # def forgot_password(self, req_data):\n    #     logger.debug(\"Service: forgot password called. with data: %s\", req_data)\n    #     serializer = ForgotPasswordSerializer(data=req_data)\n    #     serializer.is_valid(raise_exception=True)\n    #     email = serializer.data[DBFieldsCommon.EMAIL.value]",
        "detail": "gpt_base.auth.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_base.auth.services",
        "description": "gpt_base.auth.services",
        "peekOfCode": "logger = logging.getLogger(__name__)\nTokenGenerator = PasswordResetTokenGenerator()\nclass AuthService:\n    def __init__(self):\n        super(AuthService, self).__init__()\n        # self._mail_service = MailService()\n        self.__crypto = FieldCrypto(settings.EMAIL_CRYPTO_FIELD_KEY)\n    # def forgot_password(self, req_data):\n    #     logger.debug(\"Service: forgot password called. with data: %s\", req_data)\n    #     serializer = ForgotPasswordSerializer(data=req_data)",
        "detail": "gpt_base.auth.services",
        "documentation": {}
    },
    {
        "label": "TokenGenerator",
        "kind": 5,
        "importPath": "gpt_base.auth.services",
        "description": "gpt_base.auth.services",
        "peekOfCode": "TokenGenerator = PasswordResetTokenGenerator()\nclass AuthService:\n    def __init__(self):\n        super(AuthService, self).__init__()\n        # self._mail_service = MailService()\n        self.__crypto = FieldCrypto(settings.EMAIL_CRYPTO_FIELD_KEY)\n    # def forgot_password(self, req_data):\n    #     logger.debug(\"Service: forgot password called. with data: %s\", req_data)\n    #     serializer = ForgotPasswordSerializer(data=req_data)\n    #     serializer.is_valid(raise_exception=True)",
        "detail": "gpt_base.auth.services",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "gpt_base.auth.urls",
        "description": "gpt_base.auth.urls",
        "peekOfCode": "urlpatterns = [\n    path('token', CustomTokenObtainPairView.as_view()),\n    path('token/refresh', CustomTokenRefreshView.as_view()),\n    # path('forgot-password', forgot_password),\n    # path('reset-password', reset_password),\n    path('change-password', change_password),\n    path('me', get_me),\n    # path('verify-email', verify_email),\n    # path('verify-email/resend', resend_verify_email),\n    # path('change-email', change_email_login),",
        "detail": "gpt_base.auth.urls",
        "documentation": {}
    },
    {
        "label": "ModelAppLabel",
        "kind": 6,
        "importPath": "gpt_base.common.constants.app_label",
        "description": "gpt_base.common.constants.app_label",
        "peekOfCode": "class ModelAppLabel(str, Enum):\n    USER = 'user'\n    MEMBERS = 'members'\n    CONVERSATIONS = 'conversations'\n    CHATS = 'chats'\n    MASTER = 'master'\n    PROMPTS = 'prompts'\n    WORK_BOOKS = 'work_books'\n    DOCUMENTS = 'documents'\n    TEMPLATES = 'templates'",
        "detail": "gpt_base.common.constants.app_label",
        "documentation": {}
    },
    {
        "label": "RegexPattern",
        "kind": 6,
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "peekOfCode": "class RegexPattern(str, Enum):\n    PASS_REGEX = \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,255}$\"\n    SNAKE_CASE = \"(?<!^)(?=[A-Z])\"\n    PHONE_NUMBER_REGEX = \"^[0-9]{8,11}$\"\nclass TokenObtainPairEnum(str, Enum):\n    CREATED_AT_LABEL = \"created_at\"\nclass ProviderEnum(str, Enum):\n    PROVIDER_LABEL = 'provider'\n    USER = 'user'\nclass RoleEnum(str, Enum):",
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairEnum",
        "kind": 6,
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "peekOfCode": "class TokenObtainPairEnum(str, Enum):\n    CREATED_AT_LABEL = \"created_at\"\nclass ProviderEnum(str, Enum):\n    PROVIDER_LABEL = 'provider'\n    USER = 'user'\nclass RoleEnum(str, Enum):\n    USER = \"user\"\n    SYSTEM = \"system\"\n    ASSISTANT = \"assistant\"",
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "ProviderEnum",
        "kind": 6,
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "peekOfCode": "class ProviderEnum(str, Enum):\n    PROVIDER_LABEL = 'provider'\n    USER = 'user'\nclass RoleEnum(str, Enum):\n    USER = \"user\"\n    SYSTEM = \"system\"\n    ASSISTANT = \"assistant\"",
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "RoleEnum",
        "kind": 6,
        "importPath": "gpt_base.common.constants.constant",
        "description": "gpt_base.common.constants.constant",
        "peekOfCode": "class RoleEnum(str, Enum):\n    USER = \"user\"\n    SYSTEM = \"system\"\n    ASSISTANT = \"assistant\"",
        "detail": "gpt_base.common.constants.constant",
        "documentation": {}
    },
    {
        "label": "DateTimeFields",
        "kind": 6,
        "importPath": "gpt_base.common.constants.date_time",
        "description": "gpt_base.common.constants.date_time",
        "peekOfCode": "class DateTimeFields(str, Enum):\n    YEAR = '%Y'\n    MONTH = '%m'\n    DAY = '%d'\n    DATETIME = '%m/%d/%Y, %H:%M:%S'\n    SEPARATOR = ' '\nclass FormatDateTime(str, Enum):\n    DATE_TIME_HMS_FZ: str = '%Y-%m-%d %H:%M:%S.%f%z'\n    DATE_TIME = '%Y/%m/%d'\n    DATE_TIME_HMS = '%Y-%m-%d %H:%M:%S'",
        "detail": "gpt_base.common.constants.date_time",
        "documentation": {}
    },
    {
        "label": "FormatDateTime",
        "kind": 6,
        "importPath": "gpt_base.common.constants.date_time",
        "description": "gpt_base.common.constants.date_time",
        "peekOfCode": "class FormatDateTime(str, Enum):\n    DATE_TIME_HMS_FZ: str = '%Y-%m-%d %H:%M:%S.%f%z'\n    DATE_TIME = '%Y/%m/%d'\n    DATE_TIME_HMS = '%Y-%m-%d %H:%M:%S'",
        "detail": "gpt_base.common.constants.date_time",
        "documentation": {}
    },
    {
        "label": "DBUserFields",
        "kind": 6,
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "peekOfCode": "class DBUserFields(str, Enum):\n    ID = 'id'\n    EMAIL = 'email'\n    PASSWORD = 'password'\n    FIRST_NAME = 'first_name'\n    LAST_NAME = 'last_name'\n    IS_ACTIVE = 'is_active'\n    IS_STAFF = 'is_staff'\n    IS_SUPERUSER = 'is_superuser'\n    DELETE_FLAG = 'delete_flag'",
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBFieldsCommon",
        "kind": 6,
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "peekOfCode": "class DBFieldsCommon(str, Enum):\n    EMAIL = 'email'\n    TOKEN = 'token'\n    PASSWORD = 'password'\n    NEW_PASSWORD = 'new_password'\n    OLD_PASSWORD = 'old_password'\n    USER = 'user'\n    DELETE_FLAG = 'delete_flag'\n    IS_VERIFY_EMAIL = 'is_verified_mail'\n    CREATED_AT = 'created_at'",
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBMembersFields",
        "kind": 6,
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "peekOfCode": "class DBMembersFields(str, Enum):\n    ID = 'id'\n    TOKEN_LIMIT = 'token_limit'\n    QUANTITY_TOKEN_USED = 'quantity_token_used'\n    USER_ID = 'user_id'\n    USER = 'user'\n    CREATED_AT = 'created_at'\n    UPDATED_AT = 'updated_at'\nclass DBConversationsFields(str, Enum):\n    ID = 'id'",
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBConversationsFields",
        "kind": 6,
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "peekOfCode": "class DBConversationsFields(str, Enum):\n    ID = 'id'\n    MEMBER = 'member'\n    MEMBER_ID = 'member_id'\n    NAME = 'name'\n    CREATED_AT = 'created_at'\n    UPDATED_AT = 'updated_at'\nclass DBChatsFields(str, Enum):\n    ID = 'id'\n    CONVERSATION = 'conversation'",
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBChatsFields",
        "kind": 6,
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "peekOfCode": "class DBChatsFields(str, Enum):\n    ID = 'id'\n    CONVERSATION = 'conversation'\n    CONVERSATION_ID = 'conversation_id'\n    PROMPT = 'prompt'\n    CONTENT = 'content'\n    CONTENT_TRANSLATE = 'content_translate'\n    TRANSLATE_TYPE = 'translate_type'\n    TRANSLATE_TYPE_ID = 'translate_type_id'\n    ROLE = 'role'",
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBPromptsFields",
        "kind": 6,
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "peekOfCode": "class DBPromptsFields(str,Enum):\n    ID = 'id'\n    MEMBER_ID = 'member_id'\n    TITLE = 'title'\n    DESCRIPTION = 'description'\n    CREATED_AT = 'created_at'\n    UPDATED_AT = 'updated_at'\nclass DBTemplatesFields(str,Enum):\n    ID = 'id'\n    PARAMS = 'params'",
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBTemplatesFields",
        "kind": 6,
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "peekOfCode": "class DBTemplatesFields(str,Enum):\n    ID = 'id'\n    PARAMS = 'params'\n    ICON = 'icon'\n    CONTENT = 'content'\n    TEXTFEATUREBUTTON = 'text_feature_button'\n    NAME = 'name'\n    HTML = 'html'\n    CREATED_AT = 'created_at'\n    UPDATED_AT = 'updated_at'",
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBWorkBooksFields",
        "kind": 6,
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "peekOfCode": "class DBWorkBooksFields(str,Enum):\n    ID = 'id'\n    QUANTITY = 'quantity_document'\n    MEMBER_ID = 'member_id'\n    NAME = 'name'\n    HTML = 'html'\n    CREATED_AT = 'created_at'\n    UPDATED_AT = 'updated_at'\n    QUESTION_ASKED  = 'question_asked'\nclass DBDocumentsFields(str,Enum):",
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBDocumentsFields",
        "kind": 6,
        "importPath": "gpt_base.common.constants.db_fields",
        "description": "gpt_base.common.constants.db_fields",
        "peekOfCode": "class DBDocumentsFields(str,Enum):\n    ID = 'id'\n    NAME = 'name'\n    CONTENT = 'content'\n    PARAMS_VALUE = 'params_value'\n    WORKBOOK = 'workbook_id'\n    MEMBER_ID = 'member_id'\n    TEMPLATE = 'template_id'\n    CREATED_AT = 'created_at'\n    UPDATED_AT = 'updated_at'",
        "detail": "gpt_base.common.constants.db_fields",
        "documentation": {}
    },
    {
        "label": "DBTable",
        "kind": 6,
        "importPath": "gpt_base.common.constants.db_table",
        "description": "gpt_base.common.constants.db_table",
        "peekOfCode": "class DBTable(str, Enum):\n    USER = 'user'\n    MEMBERS = 'members'\n    CONVERSATIONS = 'conversations'\n    CHATS = 'chats'\n    PROMPTS = 'prompts'\n    # data master\n    M_TRANSLATE_TYPES = 'm_translate_types'\n    WORK_BOOKS = 'work_books'\n    DOCUMENTS = 'documents'",
        "detail": "gpt_base.common.constants.db_table",
        "documentation": {}
    },
    {
        "label": "MailFields",
        "kind": 6,
        "importPath": "gpt_base.common.constants.mail",
        "description": "gpt_base.common.constants.mail",
        "peekOfCode": "class MailFields(str, Enum):\n    IS_SEND_ONLY_USER = 'is_send_only_user'\n    FROM_EMAIL = 'from_email'\n    TO = 'to'\n    BCC = 'bcc'\n    CC = 'cc'\n    REPLY_TO = 'reply_to'\n    SUBJECT = 'subject'\n    HTML_TEMPLATE_NAME = 'html_template_name'\n    TXT_TEMPLATE_NAME = 'plain_template_name'",
        "detail": "gpt_base.common.constants.mail",
        "documentation": {}
    },
    {
        "label": "MailTemplateEnum",
        "kind": 6,
        "importPath": "gpt_base.common.constants.mail",
        "description": "gpt_base.common.constants.mail",
        "peekOfCode": "class MailTemplateEnum(Enum):\n    @property\n    def id(self):\n        return self.value[0]\n    @property\n    def template_html(self):\n        return f'{self.value[1]}.html'\n    @property\n    def template_txt(self):\n        return f'{self.value[1]}.txt'",
        "detail": "gpt_base.common.constants.mail",
        "documentation": {}
    },
    {
        "label": "TranslateTypesEnum",
        "kind": 6,
        "importPath": "gpt_base.common.constants.master_data",
        "description": "gpt_base.common.constants.master_data",
        "peekOfCode": "class TranslateTypesEnum(int, Enum):\n    VIETNAMESE = 1\n    ENGLISH = 2",
        "detail": "gpt_base.common.constants.master_data",
        "documentation": {}
    },
    {
        "label": "INVALID_INPUT",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "INVALID_INPUT = _('Invalid input.')\nPROVIDER_INVALID = _(\"Provider invalid\")\nTHE_EMAIL_ADDRESS_OR_PASSWORD_IS_INCORRECT = _(\"The email address or password is incorrect.\")\nTHE_USER_HAD_BEEN_DELETED_FROM_THE_SYSTEM = _(\"The User had been deleted from the system.\")\nUSER_IS_LEAVE = _(\"User is leave.\")\nUSER_IS_NOT_ACTIVE = _(\"User is not active.\")\nUSER_FORGOT_PASSWORD_SUCCESS = _(\"User forgot password success.\")\nTHIS_URL_IS_INVALID = _('This URL is invalid.')\nTHIS_TOKEN_IS_INVALID = _('This Token is invalid.')\nTHIS_TOKEN_IS_EXPIRED = _(\"This token is expired.\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "PROVIDER_INVALID",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "PROVIDER_INVALID = _(\"Provider invalid\")\nTHE_EMAIL_ADDRESS_OR_PASSWORD_IS_INCORRECT = _(\"The email address or password is incorrect.\")\nTHE_USER_HAD_BEEN_DELETED_FROM_THE_SYSTEM = _(\"The User had been deleted from the system.\")\nUSER_IS_LEAVE = _(\"User is leave.\")\nUSER_IS_NOT_ACTIVE = _(\"User is not active.\")\nUSER_FORGOT_PASSWORD_SUCCESS = _(\"User forgot password success.\")\nTHIS_URL_IS_INVALID = _('This URL is invalid.')\nTHIS_TOKEN_IS_INVALID = _('This Token is invalid.')\nTHIS_TOKEN_IS_EXPIRED = _(\"This token is expired.\")\nVERIFY_MAIL_SUCCESS = _(\"Verify mail success.\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "THE_EMAIL_ADDRESS_OR_PASSWORD_IS_INCORRECT",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "THE_EMAIL_ADDRESS_OR_PASSWORD_IS_INCORRECT = _(\"The email address or password is incorrect.\")\nTHE_USER_HAD_BEEN_DELETED_FROM_THE_SYSTEM = _(\"The User had been deleted from the system.\")\nUSER_IS_LEAVE = _(\"User is leave.\")\nUSER_IS_NOT_ACTIVE = _(\"User is not active.\")\nUSER_FORGOT_PASSWORD_SUCCESS = _(\"User forgot password success.\")\nTHIS_URL_IS_INVALID = _('This URL is invalid.')\nTHIS_TOKEN_IS_INVALID = _('This Token is invalid.')\nTHIS_TOKEN_IS_EXPIRED = _(\"This token is expired.\")\nVERIFY_MAIL_SUCCESS = _(\"Verify mail success.\")\nRESEND_VERIFY_MAIL_SUCCESS = _(\"Please check your email address.\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "THE_USER_HAD_BEEN_DELETED_FROM_THE_SYSTEM",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "THE_USER_HAD_BEEN_DELETED_FROM_THE_SYSTEM = _(\"The User had been deleted from the system.\")\nUSER_IS_LEAVE = _(\"User is leave.\")\nUSER_IS_NOT_ACTIVE = _(\"User is not active.\")\nUSER_FORGOT_PASSWORD_SUCCESS = _(\"User forgot password success.\")\nTHIS_URL_IS_INVALID = _('This URL is invalid.')\nTHIS_TOKEN_IS_INVALID = _('This Token is invalid.')\nTHIS_TOKEN_IS_EXPIRED = _(\"This token is expired.\")\nVERIFY_MAIL_SUCCESS = _(\"Verify mail success.\")\nRESEND_VERIFY_MAIL_SUCCESS = _(\"Please check your email address.\")\nRESET_PASSWORD_SUCCESS = _(\"Reset password success.\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "USER_IS_LEAVE",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "USER_IS_LEAVE = _(\"User is leave.\")\nUSER_IS_NOT_ACTIVE = _(\"User is not active.\")\nUSER_FORGOT_PASSWORD_SUCCESS = _(\"User forgot password success.\")\nTHIS_URL_IS_INVALID = _('This URL is invalid.')\nTHIS_TOKEN_IS_INVALID = _('This Token is invalid.')\nTHIS_TOKEN_IS_EXPIRED = _(\"This token is expired.\")\nVERIFY_MAIL_SUCCESS = _(\"Verify mail success.\")\nRESEND_VERIFY_MAIL_SUCCESS = _(\"Please check your email address.\")\nRESET_PASSWORD_SUCCESS = _(\"Reset password success.\")\nCHANGE_PASSWORD_SUCCESS = _(\"Change password success\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "USER_IS_NOT_ACTIVE",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "USER_IS_NOT_ACTIVE = _(\"User is not active.\")\nUSER_FORGOT_PASSWORD_SUCCESS = _(\"User forgot password success.\")\nTHIS_URL_IS_INVALID = _('This URL is invalid.')\nTHIS_TOKEN_IS_INVALID = _('This Token is invalid.')\nTHIS_TOKEN_IS_EXPIRED = _(\"This token is expired.\")\nVERIFY_MAIL_SUCCESS = _(\"Verify mail success.\")\nRESEND_VERIFY_MAIL_SUCCESS = _(\"Please check your email address.\")\nRESET_PASSWORD_SUCCESS = _(\"Reset password success.\")\nCHANGE_PASSWORD_SUCCESS = _(\"Change password success\")\nTHIS_EMAIL_NOT_YET_REGISTER = _('This email not yet register')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "USER_FORGOT_PASSWORD_SUCCESS",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "USER_FORGOT_PASSWORD_SUCCESS = _(\"User forgot password success.\")\nTHIS_URL_IS_INVALID = _('This URL is invalid.')\nTHIS_TOKEN_IS_INVALID = _('This Token is invalid.')\nTHIS_TOKEN_IS_EXPIRED = _(\"This token is expired.\")\nVERIFY_MAIL_SUCCESS = _(\"Verify mail success.\")\nRESEND_VERIFY_MAIL_SUCCESS = _(\"Please check your email address.\")\nRESET_PASSWORD_SUCCESS = _(\"Reset password success.\")\nCHANGE_PASSWORD_SUCCESS = _(\"Change password success\")\nTHIS_EMAIL_NOT_YET_REGISTER = _('This email not yet register')\nTHIS_EMAIL_VERIFIED = _('This email verified.')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "THIS_URL_IS_INVALID",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "THIS_URL_IS_INVALID = _('This URL is invalid.')\nTHIS_TOKEN_IS_INVALID = _('This Token is invalid.')\nTHIS_TOKEN_IS_EXPIRED = _(\"This token is expired.\")\nVERIFY_MAIL_SUCCESS = _(\"Verify mail success.\")\nRESEND_VERIFY_MAIL_SUCCESS = _(\"Please check your email address.\")\nRESET_PASSWORD_SUCCESS = _(\"Reset password success.\")\nCHANGE_PASSWORD_SUCCESS = _(\"Change password success\")\nTHIS_EMAIL_NOT_YET_REGISTER = _('This email not yet register')\nTHIS_EMAIL_VERIFIED = _('This email verified.')\nNEW_EMAIL = _(\"New email\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "THIS_TOKEN_IS_INVALID",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "THIS_TOKEN_IS_INVALID = _('This Token is invalid.')\nTHIS_TOKEN_IS_EXPIRED = _(\"This token is expired.\")\nVERIFY_MAIL_SUCCESS = _(\"Verify mail success.\")\nRESEND_VERIFY_MAIL_SUCCESS = _(\"Please check your email address.\")\nRESET_PASSWORD_SUCCESS = _(\"Reset password success.\")\nCHANGE_PASSWORD_SUCCESS = _(\"Change password success\")\nTHIS_EMAIL_NOT_YET_REGISTER = _('This email not yet register')\nTHIS_EMAIL_VERIFIED = _('This email verified.')\nNEW_EMAIL = _(\"New email\")\nNEW_PASSWORD = _(\"New password\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "THIS_TOKEN_IS_EXPIRED",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "THIS_TOKEN_IS_EXPIRED = _(\"This token is expired.\")\nVERIFY_MAIL_SUCCESS = _(\"Verify mail success.\")\nRESEND_VERIFY_MAIL_SUCCESS = _(\"Please check your email address.\")\nRESET_PASSWORD_SUCCESS = _(\"Reset password success.\")\nCHANGE_PASSWORD_SUCCESS = _(\"Change password success\")\nTHIS_EMAIL_NOT_YET_REGISTER = _('This email not yet register')\nTHIS_EMAIL_VERIFIED = _('This email verified.')\nNEW_EMAIL = _(\"New email\")\nNEW_PASSWORD = _(\"New password\")\nI_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING = _(\"I cannot change to the email address I am using.\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "VERIFY_MAIL_SUCCESS",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "VERIFY_MAIL_SUCCESS = _(\"Verify mail success.\")\nRESEND_VERIFY_MAIL_SUCCESS = _(\"Please check your email address.\")\nRESET_PASSWORD_SUCCESS = _(\"Reset password success.\")\nCHANGE_PASSWORD_SUCCESS = _(\"Change password success\")\nTHIS_EMAIL_NOT_YET_REGISTER = _('This email not yet register')\nTHIS_EMAIL_VERIFIED = _('This email verified.')\nNEW_EMAIL = _(\"New email\")\nNEW_PASSWORD = _(\"New password\")\nI_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING = _(\"I cannot change to the email address I am using.\")\nDONT_MATCH_CURRENT_PASSWORD_PLEASE_CHECK_AGAIN = _(\"Dont match current password. Please check again\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "RESEND_VERIFY_MAIL_SUCCESS",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "RESEND_VERIFY_MAIL_SUCCESS = _(\"Please check your email address.\")\nRESET_PASSWORD_SUCCESS = _(\"Reset password success.\")\nCHANGE_PASSWORD_SUCCESS = _(\"Change password success\")\nTHIS_EMAIL_NOT_YET_REGISTER = _('This email not yet register')\nTHIS_EMAIL_VERIFIED = _('This email verified.')\nNEW_EMAIL = _(\"New email\")\nNEW_PASSWORD = _(\"New password\")\nI_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING = _(\"I cannot change to the email address I am using.\")\nDONT_MATCH_CURRENT_PASSWORD_PLEASE_CHECK_AGAIN = _(\"Dont match current password. Please check again\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT = _(\"Providers have to be customer or client\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "RESET_PASSWORD_SUCCESS",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "RESET_PASSWORD_SUCCESS = _(\"Reset password success.\")\nCHANGE_PASSWORD_SUCCESS = _(\"Change password success\")\nTHIS_EMAIL_NOT_YET_REGISTER = _('This email not yet register')\nTHIS_EMAIL_VERIFIED = _('This email verified.')\nNEW_EMAIL = _(\"New email\")\nNEW_PASSWORD = _(\"New password\")\nI_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING = _(\"I cannot change to the email address I am using.\")\nDONT_MATCH_CURRENT_PASSWORD_PLEASE_CHECK_AGAIN = _(\"Dont match current password. Please check again\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT = _(\"Providers have to be customer or client\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT_OR_STAFF = _(\"Providers have to be customer or client or staff\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "CHANGE_PASSWORD_SUCCESS",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "CHANGE_PASSWORD_SUCCESS = _(\"Change password success\")\nTHIS_EMAIL_NOT_YET_REGISTER = _('This email not yet register')\nTHIS_EMAIL_VERIFIED = _('This email verified.')\nNEW_EMAIL = _(\"New email\")\nNEW_PASSWORD = _(\"New password\")\nI_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING = _(\"I cannot change to the email address I am using.\")\nDONT_MATCH_CURRENT_PASSWORD_PLEASE_CHECK_AGAIN = _(\"Dont match current password. Please check again\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT = _(\"Providers have to be customer or client\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT_OR_STAFF = _(\"Providers have to be customer or client or staff\")\nCONDITION_PASSWORD_VALID = _(\"At least one uppercase letter, one lowercase letter, one number\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "THIS_EMAIL_NOT_YET_REGISTER",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "THIS_EMAIL_NOT_YET_REGISTER = _('This email not yet register')\nTHIS_EMAIL_VERIFIED = _('This email verified.')\nNEW_EMAIL = _(\"New email\")\nNEW_PASSWORD = _(\"New password\")\nI_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING = _(\"I cannot change to the email address I am using.\")\nDONT_MATCH_CURRENT_PASSWORD_PLEASE_CHECK_AGAIN = _(\"Dont match current password. Please check again\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT = _(\"Providers have to be customer or client\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT_OR_STAFF = _(\"Providers have to be customer or client or staff\")\nCONDITION_PASSWORD_VALID = _(\"At least one uppercase letter, one lowercase letter, one number\")\nTHE_SAME_STRING_SEQUENCE_AS_THE_EMAIL_ADDRESS = _(\"The same string sequence as the email address\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "THIS_EMAIL_VERIFIED",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "THIS_EMAIL_VERIFIED = _('This email verified.')\nNEW_EMAIL = _(\"New email\")\nNEW_PASSWORD = _(\"New password\")\nI_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING = _(\"I cannot change to the email address I am using.\")\nDONT_MATCH_CURRENT_PASSWORD_PLEASE_CHECK_AGAIN = _(\"Dont match current password. Please check again\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT = _(\"Providers have to be customer or client\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT_OR_STAFF = _(\"Providers have to be customer or client or staff\")\nCONDITION_PASSWORD_VALID = _(\"At least one uppercase letter, one lowercase letter, one number\")\nTHE_SAME_STRING_SEQUENCE_AS_THE_EMAIL_ADDRESS = _(\"The same string sequence as the email address\")\nYOU_HAVE_SUCCESSFULLY_CHANGED_YOUR_EMAIL_ADDRESS = _(\"You have successfully changed your email address.\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "NEW_EMAIL",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "NEW_EMAIL = _(\"New email\")\nNEW_PASSWORD = _(\"New password\")\nI_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING = _(\"I cannot change to the email address I am using.\")\nDONT_MATCH_CURRENT_PASSWORD_PLEASE_CHECK_AGAIN = _(\"Dont match current password. Please check again\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT = _(\"Providers have to be customer or client\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT_OR_STAFF = _(\"Providers have to be customer or client or staff\")\nCONDITION_PASSWORD_VALID = _(\"At least one uppercase letter, one lowercase letter, one number\")\nTHE_SAME_STRING_SEQUENCE_AS_THE_EMAIL_ADDRESS = _(\"The same string sequence as the email address\")\nYOU_HAVE_SUCCESSFULLY_CHANGED_YOUR_EMAIL_ADDRESS = _(\"You have successfully changed your email address.\")\nCAN_NOT_UPDATE = _('Cannot update')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "NEW_PASSWORD",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "NEW_PASSWORD = _(\"New password\")\nI_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING = _(\"I cannot change to the email address I am using.\")\nDONT_MATCH_CURRENT_PASSWORD_PLEASE_CHECK_AGAIN = _(\"Dont match current password. Please check again\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT = _(\"Providers have to be customer or client\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT_OR_STAFF = _(\"Providers have to be customer or client or staff\")\nCONDITION_PASSWORD_VALID = _(\"At least one uppercase letter, one lowercase letter, one number\")\nTHE_SAME_STRING_SEQUENCE_AS_THE_EMAIL_ADDRESS = _(\"The same string sequence as the email address\")\nYOU_HAVE_SUCCESSFULLY_CHANGED_YOUR_EMAIL_ADDRESS = _(\"You have successfully changed your email address.\")\nCAN_NOT_UPDATE = _('Cannot update')\nPASSWORD = _('Password')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "I_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "I_CANNOT_CHANGE_TO_EMAIL_ADDRESS_I_AM_USING = _(\"I cannot change to the email address I am using.\")\nDONT_MATCH_CURRENT_PASSWORD_PLEASE_CHECK_AGAIN = _(\"Dont match current password. Please check again\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT = _(\"Providers have to be customer or client\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT_OR_STAFF = _(\"Providers have to be customer or client or staff\")\nCONDITION_PASSWORD_VALID = _(\"At least one uppercase letter, one lowercase letter, one number\")\nTHE_SAME_STRING_SEQUENCE_AS_THE_EMAIL_ADDRESS = _(\"The same string sequence as the email address\")\nYOU_HAVE_SUCCESSFULLY_CHANGED_YOUR_EMAIL_ADDRESS = _(\"You have successfully changed your email address.\")\nCAN_NOT_UPDATE = _('Cannot update')\nPASSWORD = _('Password')\nEMAIL_IS_EXISTED = _('Email is existed')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "DONT_MATCH_CURRENT_PASSWORD_PLEASE_CHECK_AGAIN",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "DONT_MATCH_CURRENT_PASSWORD_PLEASE_CHECK_AGAIN = _(\"Dont match current password. Please check again\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT = _(\"Providers have to be customer or client\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT_OR_STAFF = _(\"Providers have to be customer or client or staff\")\nCONDITION_PASSWORD_VALID = _(\"At least one uppercase letter, one lowercase letter, one number\")\nTHE_SAME_STRING_SEQUENCE_AS_THE_EMAIL_ADDRESS = _(\"The same string sequence as the email address\")\nYOU_HAVE_SUCCESSFULLY_CHANGED_YOUR_EMAIL_ADDRESS = _(\"You have successfully changed your email address.\")\nCAN_NOT_UPDATE = _('Cannot update')\nPASSWORD = _('Password')\nEMAIL_IS_EXISTED = _('Email is existed')\nJOB = _('Job')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "PROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "PROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT = _(\"Providers have to be customer or client\")\nPROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT_OR_STAFF = _(\"Providers have to be customer or client or staff\")\nCONDITION_PASSWORD_VALID = _(\"At least one uppercase letter, one lowercase letter, one number\")\nTHE_SAME_STRING_SEQUENCE_AS_THE_EMAIL_ADDRESS = _(\"The same string sequence as the email address\")\nYOU_HAVE_SUCCESSFULLY_CHANGED_YOUR_EMAIL_ADDRESS = _(\"You have successfully changed your email address.\")\nCAN_NOT_UPDATE = _('Cannot update')\nPASSWORD = _('Password')\nEMAIL_IS_EXISTED = _('Email is existed')\nJOB = _('Job')\nMAX_FILE_SIZE = _('Max file size')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "PROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT_OR_STAFF",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "PROVIDERS_HAVE_TO_BE_CUSTOMER_OR_CLIENT_OR_STAFF = _(\"Providers have to be customer or client or staff\")\nCONDITION_PASSWORD_VALID = _(\"At least one uppercase letter, one lowercase letter, one number\")\nTHE_SAME_STRING_SEQUENCE_AS_THE_EMAIL_ADDRESS = _(\"The same string sequence as the email address\")\nYOU_HAVE_SUCCESSFULLY_CHANGED_YOUR_EMAIL_ADDRESS = _(\"You have successfully changed your email address.\")\nCAN_NOT_UPDATE = _('Cannot update')\nPASSWORD = _('Password')\nEMAIL_IS_EXISTED = _('Email is existed')\nJOB = _('Job')\nMAX_FILE_SIZE = _('Max file size')\nFIELD_STATUS_ID_IS_INVALID = _('Field status_id is invalid')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "CONDITION_PASSWORD_VALID",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "CONDITION_PASSWORD_VALID = _(\"At least one uppercase letter, one lowercase letter, one number\")\nTHE_SAME_STRING_SEQUENCE_AS_THE_EMAIL_ADDRESS = _(\"The same string sequence as the email address\")\nYOU_HAVE_SUCCESSFULLY_CHANGED_YOUR_EMAIL_ADDRESS = _(\"You have successfully changed your email address.\")\nCAN_NOT_UPDATE = _('Cannot update')\nPASSWORD = _('Password')\nEMAIL_IS_EXISTED = _('Email is existed')\nJOB = _('Job')\nMAX_FILE_SIZE = _('Max file size')\nFIELD_STATUS_ID_IS_INVALID = _('Field status_id is invalid')\nFAILED_TO_CHANGE_EMAIL_ADDRESS = _(\"Failed to change email address.\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "THE_SAME_STRING_SEQUENCE_AS_THE_EMAIL_ADDRESS",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "THE_SAME_STRING_SEQUENCE_AS_THE_EMAIL_ADDRESS = _(\"The same string sequence as the email address\")\nYOU_HAVE_SUCCESSFULLY_CHANGED_YOUR_EMAIL_ADDRESS = _(\"You have successfully changed your email address.\")\nCAN_NOT_UPDATE = _('Cannot update')\nPASSWORD = _('Password')\nEMAIL_IS_EXISTED = _('Email is existed')\nJOB = _('Job')\nMAX_FILE_SIZE = _('Max file size')\nFIELD_STATUS_ID_IS_INVALID = _('Field status_id is invalid')\nFAILED_TO_CHANGE_EMAIL_ADDRESS = _(\"Failed to change email address.\")\nYOU_ALREADY_ORDERED_THIS_PROJECT = _(\"You already ordered this project.\")",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "YOU_HAVE_SUCCESSFULLY_CHANGED_YOUR_EMAIL_ADDRESS",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "YOU_HAVE_SUCCESSFULLY_CHANGED_YOUR_EMAIL_ADDRESS = _(\"You have successfully changed your email address.\")\nCAN_NOT_UPDATE = _('Cannot update')\nPASSWORD = _('Password')\nEMAIL_IS_EXISTED = _('Email is existed')\nJOB = _('Job')\nMAX_FILE_SIZE = _('Max file size')\nFIELD_STATUS_ID_IS_INVALID = _('Field status_id is invalid')\nFAILED_TO_CHANGE_EMAIL_ADDRESS = _(\"Failed to change email address.\")\nYOU_ALREADY_ORDERED_THIS_PROJECT = _(\"You already ordered this project.\")\nUPDATE_SUCCESSFUL = _('Update successful')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "CAN_NOT_UPDATE",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "CAN_NOT_UPDATE = _('Cannot update')\nPASSWORD = _('Password')\nEMAIL_IS_EXISTED = _('Email is existed')\nJOB = _('Job')\nMAX_FILE_SIZE = _('Max file size')\nFIELD_STATUS_ID_IS_INVALID = _('Field status_id is invalid')\nFAILED_TO_CHANGE_EMAIL_ADDRESS = _(\"Failed to change email address.\")\nYOU_ALREADY_ORDERED_THIS_PROJECT = _(\"You already ordered this project.\")\nUPDATE_SUCCESSFUL = _('Update successful')\nPLEASE_INPUT_25_PERCENT_OR_MORE = _('Please input 25 percent or more.')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "PASSWORD = _('Password')\nEMAIL_IS_EXISTED = _('Email is existed')\nJOB = _('Job')\nMAX_FILE_SIZE = _('Max file size')\nFIELD_STATUS_ID_IS_INVALID = _('Field status_id is invalid')\nFAILED_TO_CHANGE_EMAIL_ADDRESS = _(\"Failed to change email address.\")\nYOU_ALREADY_ORDERED_THIS_PROJECT = _(\"You already ordered this project.\")\nUPDATE_SUCCESSFUL = _('Update successful')\nPLEASE_INPUT_25_PERCENT_OR_MORE = _('Please input 25 percent or more.')\nPLEASE_INPUT_LESS_THAN_100_PERCENT = _('Please input less than 100 percent.')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "EMAIL_IS_EXISTED",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "EMAIL_IS_EXISTED = _('Email is existed')\nJOB = _('Job')\nMAX_FILE_SIZE = _('Max file size')\nFIELD_STATUS_ID_IS_INVALID = _('Field status_id is invalid')\nFAILED_TO_CHANGE_EMAIL_ADDRESS = _(\"Failed to change email address.\")\nYOU_ALREADY_ORDERED_THIS_PROJECT = _(\"You already ordered this project.\")\nUPDATE_SUCCESSFUL = _('Update successful')\nPLEASE_INPUT_25_PERCENT_OR_MORE = _('Please input 25 percent or more.')\nPLEASE_INPUT_LESS_THAN_100_PERCENT = _('Please input less than 100 percent.')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "JOB",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "JOB = _('Job')\nMAX_FILE_SIZE = _('Max file size')\nFIELD_STATUS_ID_IS_INVALID = _('Field status_id is invalid')\nFAILED_TO_CHANGE_EMAIL_ADDRESS = _(\"Failed to change email address.\")\nYOU_ALREADY_ORDERED_THIS_PROJECT = _(\"You already ordered this project.\")\nUPDATE_SUCCESSFUL = _('Update successful')\nPLEASE_INPUT_25_PERCENT_OR_MORE = _('Please input 25 percent or more.')\nPLEASE_INPUT_LESS_THAN_100_PERCENT = _('Please input less than 100 percent.')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "MAX_FILE_SIZE",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "MAX_FILE_SIZE = _('Max file size')\nFIELD_STATUS_ID_IS_INVALID = _('Field status_id is invalid')\nFAILED_TO_CHANGE_EMAIL_ADDRESS = _(\"Failed to change email address.\")\nYOU_ALREADY_ORDERED_THIS_PROJECT = _(\"You already ordered this project.\")\nUPDATE_SUCCESSFUL = _('Update successful')\nPLEASE_INPUT_25_PERCENT_OR_MORE = _('Please input 25 percent or more.')\nPLEASE_INPUT_LESS_THAN_100_PERCENT = _('Please input less than 100 percent.')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "FIELD_STATUS_ID_IS_INVALID",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "FIELD_STATUS_ID_IS_INVALID = _('Field status_id is invalid')\nFAILED_TO_CHANGE_EMAIL_ADDRESS = _(\"Failed to change email address.\")\nYOU_ALREADY_ORDERED_THIS_PROJECT = _(\"You already ordered this project.\")\nUPDATE_SUCCESSFUL = _('Update successful')\nPLEASE_INPUT_25_PERCENT_OR_MORE = _('Please input 25 percent or more.')\nPLEASE_INPUT_LESS_THAN_100_PERCENT = _('Please input less than 100 percent.')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "FAILED_TO_CHANGE_EMAIL_ADDRESS",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "FAILED_TO_CHANGE_EMAIL_ADDRESS = _(\"Failed to change email address.\")\nYOU_ALREADY_ORDERED_THIS_PROJECT = _(\"You already ordered this project.\")\nUPDATE_SUCCESSFUL = _('Update successful')\nPLEASE_INPUT_25_PERCENT_OR_MORE = _('Please input 25 percent or more.')\nPLEASE_INPUT_LESS_THAN_100_PERCENT = _('Please input less than 100 percent.')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "YOU_ALREADY_ORDERED_THIS_PROJECT",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "YOU_ALREADY_ORDERED_THIS_PROJECT = _(\"You already ordered this project.\")\nUPDATE_SUCCESSFUL = _('Update successful')\nPLEASE_INPUT_25_PERCENT_OR_MORE = _('Please input 25 percent or more.')\nPLEASE_INPUT_LESS_THAN_100_PERCENT = _('Please input less than 100 percent.')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "UPDATE_SUCCESSFUL",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "UPDATE_SUCCESSFUL = _('Update successful')\nPLEASE_INPUT_25_PERCENT_OR_MORE = _('Please input 25 percent or more.')\nPLEASE_INPUT_LESS_THAN_100_PERCENT = _('Please input less than 100 percent.')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "PLEASE_INPUT_25_PERCENT_OR_MORE",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "PLEASE_INPUT_25_PERCENT_OR_MORE = _('Please input 25 percent or more.')\nPLEASE_INPUT_LESS_THAN_100_PERCENT = _('Please input less than 100 percent.')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "PLEASE_INPUT_LESS_THAN_100_PERCENT",
        "kind": 5,
        "importPath": "gpt_base.common.constants.message_code",
        "description": "gpt_base.common.constants.message_code",
        "peekOfCode": "PLEASE_INPUT_LESS_THAN_100_PERCENT = _('Please input less than 100 percent.')",
        "detail": "gpt_base.common.constants.message_code",
        "documentation": {}
    },
    {
        "label": "RelatedName",
        "kind": 6,
        "importPath": "gpt_base.common.constants.related_name",
        "description": "gpt_base.common.constants.related_name",
        "peekOfCode": "class RelatedName(Enum):\n    USERS = \"users\"\n    USER_MEMBERS = \"user_members\"\n    MEMBERS_USER = \"members_user\"\n    MEMBERS_CONVERSATIONS = \"members_conversions\"\n    MEMBERS_PROMPTS = \"members_prompts\"\n    CONVERSATIONS_CHATS = \"conversations_chats\"\n    WORKBOOKS_MEMBERS = 'workbooks_members'\n    DOCUMENTS_WORKBOOK = 'documents_workbooks'\n    DOCUMENTS_TEMPLATES  = 'documents_templates'",
        "detail": "gpt_base.common.constants.related_name",
        "documentation": {}
    },
    {
        "label": "VerboseNamePlural",
        "kind": 6,
        "importPath": "gpt_base.common.constants.verbose_name_plural",
        "description": "gpt_base.common.constants.verbose_name_plural",
        "peekOfCode": "class VerboseNamePlural(str, Enum):\n    USER = 'users'\n    MEMBERS = 'members'\n    CONVERSATIONS = 'conversations'\n    CHATS = 'chats'\n    PROMPTS ='prompts'\n    WORK_BOOKS = 'work_books'\n    DOCUMENTS = 'documents'\n    TEMPLATES = 'templates'",
        "detail": "gpt_base.common.constants.verbose_name_plural",
        "documentation": {}
    },
    {
        "label": "ViewSetAction",
        "kind": 6,
        "importPath": "gpt_base.common.constants.view_action",
        "description": "gpt_base.common.constants.view_action",
        "peekOfCode": "class ViewSetAction(str, Enum):\n    LIST = 'list'\n    LIST_BASIC = 'list_basic'\n    DETAIL = 'retrieve'\n    CREATE = 'create'\n    UPDATE = 'update'\n    DELETE = 'destroy'\nclass ConversationViewSetAction(str, Enum):\n    DELETE_ALL_CHAT = 'delete_all_chat'",
        "detail": "gpt_base.common.constants.view_action",
        "documentation": {}
    },
    {
        "label": "ConversationViewSetAction",
        "kind": 6,
        "importPath": "gpt_base.common.constants.view_action",
        "description": "gpt_base.common.constants.view_action",
        "peekOfCode": "class ConversationViewSetAction(str, Enum):\n    DELETE_ALL_CHAT = 'delete_all_chat'",
        "detail": "gpt_base.common.constants.view_action",
        "documentation": {}
    },
    {
        "label": "DateTimeModel",
        "kind": 6,
        "importPath": "gpt_base.common.models.base",
        "description": "gpt_base.common.models.base",
        "peekOfCode": "class DateTimeModel(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True, editable=False)\n    updated_at = models.DateTimeField(auto_now=True, editable=False)\n    class Meta:\n        abstract = True\nclass CustomBaseUserModel(AbstractBaseUser, PermissionsMixin, DateTimeModel):\n    email = models.EmailField(max_length=255, unique=True)\n    date_joined = models.DateTimeField(('date joined'), default=timezone.now)\n    is_staff = models.BooleanField(default=False)\n    is_active = models.BooleanField(default=True)",
        "detail": "gpt_base.common.models.base",
        "documentation": {}
    },
    {
        "label": "CustomBaseUserModel",
        "kind": 6,
        "importPath": "gpt_base.common.models.base",
        "description": "gpt_base.common.models.base",
        "peekOfCode": "class CustomBaseUserModel(AbstractBaseUser, PermissionsMixin, DateTimeModel):\n    email = models.EmailField(max_length=255, unique=True)\n    date_joined = models.DateTimeField(('date joined'), default=timezone.now)\n    is_staff = models.BooleanField(default=False)\n    is_active = models.BooleanField(default=True)\n    USERNAME_FIELD = 'email'\n    objects = CustomUserManager()\n    class Meta:\n        abstract = True\nclass MaterBaseModel(models.Model):",
        "detail": "gpt_base.common.models.base",
        "documentation": {}
    },
    {
        "label": "MaterBaseModel",
        "kind": 6,
        "importPath": "gpt_base.common.models.base",
        "description": "gpt_base.common.models.base",
        "peekOfCode": "class MaterBaseModel(models.Model):\n    name = models.CharField(max_length=255, db_index=True)\n    delete_flag = models.BooleanField(default=False)\n    class Meta:\n        abstract = True",
        "detail": "gpt_base.common.models.base",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "kind": 6,
        "importPath": "gpt_base.common.models.managers",
        "description": "gpt_base.common.models.managers",
        "peekOfCode": "class CustomUserManager(BaseUserManager):\n    \"\"\"\n    Custom user model manager where email is the unique identifiers\n    for authentication instead of usernames.\n    \"\"\"\n    def create_user(self, email, password, **extra_fields):\n        \"\"\"\n        Create and save a User with the given email and password.\n        \"\"\"\n        if not email:",
        "detail": "gpt_base.common.models.managers",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "gpt_base.common.services.backends",
        "description": "gpt_base.common.services.backends",
        "peekOfCode": "def get_user(user_id):\n    try:\n        user = User._default_manager.get(pk=user_id)\n        return user\n    except Exception:\n        return None",
        "detail": "gpt_base.common.services.backends",
        "documentation": {}
    },
    {
        "label": "ChatGPTServiceBase",
        "kind": 6,
        "importPath": "gpt_base.common.services.chat_gpt",
        "description": "gpt_base.common.services.chat_gpt",
        "peekOfCode": "class ChatGPTServiceBase:\n    def __init__(self):\n        super(ChatGPTServiceBase, self).__init__()\n    def chat_completion(\n        self,\n        messages, \n        temperature=0.8, \n        top_p=1,\n        stream=True,\n    ):",
        "detail": "gpt_base.common.services.chat_gpt",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_base.common.services.chat_gpt",
        "description": "gpt_base.common.services.chat_gpt",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ChatGPTServiceBase:\n    def __init__(self):\n        super(ChatGPTServiceBase, self).__init__()\n    def chat_completion(\n        self,\n        messages, \n        temperature=0.8, \n        top_p=1,\n        stream=True,",
        "detail": "gpt_base.common.services.chat_gpt",
        "documentation": {}
    },
    {
        "label": "FieldCrypto",
        "kind": 6,
        "importPath": "gpt_base.common.utils.crypto",
        "description": "gpt_base.common.utils.crypto",
        "peekOfCode": "class FieldCrypto:\n    \"\"\"Encryption Utils.\"\"\"\n    def __init__(self, key):\n        super(FieldCrypto, self).__init__()\n        self.key = key\n    @cached_property\n    def keys(self):\n        \"\"\"Get keys for encryption and decryption.\"\"\"\n        key = self.key\n        if key is None:",
        "detail": "gpt_base.common.utils.crypto",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "kind": 6,
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "peekOfCode": "class PermissionDenied(APIException):\n    status_code = status.HTTP_403_FORBIDDEN\n    default_detail = 'permission denied'\n    default_code = '403'\nclass CustomerInvalidToken(AuthenticationFailed):\n    status_code = status.HTTP_400_BAD_REQUEST\n    default_detail = 'Token is invalid or expired'\n    default_code = 'token_not_valid'\nclass CustomAPIException(APIException):\n    def __init__(",
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomerInvalidToken",
        "kind": 6,
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "peekOfCode": "class CustomerInvalidToken(AuthenticationFailed):\n    status_code = status.HTTP_400_BAD_REQUEST\n    default_detail = 'Token is invalid or expired'\n    default_code = 'token_not_valid'\nclass CustomAPIException(APIException):\n    def __init__(\n        self,\n        detail=_(\"Common error\"),\n        status_code=status.HTTP_400_BAD_REQUEST,\n        message_code=None,",
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomAPIException",
        "kind": 6,
        "importPath": "gpt_base.common.utils.exceptions",
        "description": "gpt_base.common.utils.exceptions",
        "peekOfCode": "class CustomAPIException(APIException):\n    def __init__(\n        self,\n        detail=_(\"Common error\"),\n        status_code=status.HTTP_400_BAD_REQUEST,\n        message_code=None,\n    ):\n        self.detail = {\"detail\": detail, \"message_code\": message_code}\n        self.status_code = status_code",
        "detail": "gpt_base.common.utils.exceptions",
        "documentation": {}
    },
    {
        "label": "CorrelationMiddleware",
        "kind": 6,
        "importPath": "gpt_base.common.utils.middleware",
        "description": "gpt_base.common.utils.middleware",
        "peekOfCode": "class CorrelationMiddleware(MiddlewareMixin):\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def process_request(self, request):\n        req_uuid = uuid.uuid4()\n        _do_set_req_uuid(req_uuid)\n        logger.info(f'START \"{request.path} {request.method}\"')\n        _do_set_current_user(lambda self: getattr(request, 'user', None))\n    def process_response(self, request, response):\n        current_user = request.user",
        "detail": "gpt_base.common.utils.middleware",
        "documentation": {}
    },
    {
        "label": "RequestUuidFilter",
        "kind": 6,
        "importPath": "gpt_base.common.utils.middleware",
        "description": "gpt_base.common.utils.middleware",
        "peekOfCode": "class RequestUuidFilter(logging.Filter):\n    def filter(self, record):\n        req_uuid = getattr(_thread_locals, REQ_UUID_ATTR_NAME, '')\n        record.req_uuid = req_uuid\n        return True",
        "detail": "gpt_base.common.utils.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "gpt_base.common.utils.middleware",
        "description": "gpt_base.common.utils.middleware",
        "peekOfCode": "def get_current_user():\n    current_user = getattr(_thread_locals, USER_ATTR_NAME, None)\n    if callable(current_user):\n        return current_user()\n    return current_user\ndef get_req_uuid():\n    req_uuid = getattr(_thread_locals, REQ_UUID_ATTR_NAME, None)\n    return req_uuid\nclass CorrelationMiddleware(MiddlewareMixin):\n    def __init__(self, get_response):",
        "detail": "gpt_base.common.utils.middleware",
        "documentation": {}
    },
    {
        "label": "get_req_uuid",
        "kind": 2,
        "importPath": "gpt_base.common.utils.middleware",
        "description": "gpt_base.common.utils.middleware",
        "peekOfCode": "def get_req_uuid():\n    req_uuid = getattr(_thread_locals, REQ_UUID_ATTR_NAME, None)\n    return req_uuid\nclass CorrelationMiddleware(MiddlewareMixin):\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def process_request(self, request):\n        req_uuid = uuid.uuid4()\n        _do_set_req_uuid(req_uuid)\n        logger.info(f'START \"{request.path} {request.method}\"')",
        "detail": "gpt_base.common.utils.middleware",
        "documentation": {}
    },
    {
        "label": "USER_ATTR_NAME",
        "kind": 5,
        "importPath": "gpt_base.common.utils.middleware",
        "description": "gpt_base.common.utils.middleware",
        "peekOfCode": "USER_ATTR_NAME = getattr(settings, 'LOCAL_USER_ATTR_NAME', '_current_user')\nREQ_UUID_ATTR_NAME = getattr(settings, 'LOCAL_REQ_UUID_ATTR_NAME', '_req_uuid')\nlogger = logging.getLogger(__name__)\n_thread_locals = local()\ndef _do_set_current_user(user_fun):\n    setattr(_thread_locals, USER_ATTR_NAME, user_fun.__get__(user_fun, local))\ndef _do_del_current_user():\n    delattr(_thread_locals, USER_ATTR_NAME)\ndef _do_set_req_uuid(request_uuid):\n    setattr(_thread_locals, REQ_UUID_ATTR_NAME, request_uuid)",
        "detail": "gpt_base.common.utils.middleware",
        "documentation": {}
    },
    {
        "label": "REQ_UUID_ATTR_NAME",
        "kind": 5,
        "importPath": "gpt_base.common.utils.middleware",
        "description": "gpt_base.common.utils.middleware",
        "peekOfCode": "REQ_UUID_ATTR_NAME = getattr(settings, 'LOCAL_REQ_UUID_ATTR_NAME', '_req_uuid')\nlogger = logging.getLogger(__name__)\n_thread_locals = local()\ndef _do_set_current_user(user_fun):\n    setattr(_thread_locals, USER_ATTR_NAME, user_fun.__get__(user_fun, local))\ndef _do_del_current_user():\n    delattr(_thread_locals, USER_ATTR_NAME)\ndef _do_set_req_uuid(request_uuid):\n    setattr(_thread_locals, REQ_UUID_ATTR_NAME, request_uuid)\ndef _do_del_req_uuid():",
        "detail": "gpt_base.common.utils.middleware",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_base.common.utils.middleware",
        "description": "gpt_base.common.utils.middleware",
        "peekOfCode": "logger = logging.getLogger(__name__)\n_thread_locals = local()\ndef _do_set_current_user(user_fun):\n    setattr(_thread_locals, USER_ATTR_NAME, user_fun.__get__(user_fun, local))\ndef _do_del_current_user():\n    delattr(_thread_locals, USER_ATTR_NAME)\ndef _do_set_req_uuid(request_uuid):\n    setattr(_thread_locals, REQ_UUID_ATTR_NAME, request_uuid)\ndef _do_del_req_uuid():\n    req_uuid = getattr(_thread_locals, REQ_UUID_ATTR_NAME, None)",
        "detail": "gpt_base.common.utils.middleware",
        "documentation": {}
    },
    {
        "label": "_thread_locals",
        "kind": 5,
        "importPath": "gpt_base.common.utils.middleware",
        "description": "gpt_base.common.utils.middleware",
        "peekOfCode": "_thread_locals = local()\ndef _do_set_current_user(user_fun):\n    setattr(_thread_locals, USER_ATTR_NAME, user_fun.__get__(user_fun, local))\ndef _do_del_current_user():\n    delattr(_thread_locals, USER_ATTR_NAME)\ndef _do_set_req_uuid(request_uuid):\n    setattr(_thread_locals, REQ_UUID_ATTR_NAME, request_uuid)\ndef _do_del_req_uuid():\n    req_uuid = getattr(_thread_locals, REQ_UUID_ATTR_NAME, None)\n    if req_uuid is not None:",
        "detail": "gpt_base.common.utils.middleware",
        "documentation": {}
    },
    {
        "label": "ForeignKeyField",
        "kind": 6,
        "importPath": "gpt_base.common.utils.serializers",
        "description": "gpt_base.common.utils.serializers",
        "peekOfCode": "class ForeignKeyField(serializers.IntegerField):\n    def __init__(self, model, **kwargs):\n        self.model = model\n        super().__init__(**kwargs)\n    def to_internal_value(self, data):\n        if not data:\n            return None\n        try:\n            obj = self.model.objects.get(pk=data)\n        except ObjectDoesNotExist:",
        "detail": "gpt_base.common.utils.serializers",
        "documentation": {}
    },
    {
        "label": "PaginationSerializers",
        "kind": 6,
        "importPath": "gpt_base.common.utils.serializers",
        "description": "gpt_base.common.utils.serializers",
        "peekOfCode": "class PaginationSerializers(serializers.Serializer):\n    page = serializers.IntegerField(default=1)\n    page_size = serializers.IntegerField(default=10)",
        "detail": "gpt_base.common.utils.serializers",
        "documentation": {}
    },
    {
        "label": "check_regex",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def check_regex(pattern, input_string):\n    return re.match(pattern, input_string)\ndef get_current_time(time_zone=settings.TIME_ZONE):\n    current_time = datetime.now().astimezone(tz=pytz.timezone(time_zone))\n    return current_time\ndef get_current_time_plus_one_min(time_zone=settings.TIME_ZONE):\n    current_time = datetime.now().astimezone(tz=pytz.timezone(time_zone))\n    return current_time + timedelta(minutes=1)\ndef get_str_time_now(str_format='%Y-%m-%d_%H-%M-%S', time_zone=settings.TIME_ZONE):\n    current_time = get_current_time(time_zone)",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "get_current_time",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def get_current_time(time_zone=settings.TIME_ZONE):\n    current_time = datetime.now().astimezone(tz=pytz.timezone(time_zone))\n    return current_time\ndef get_current_time_plus_one_min(time_zone=settings.TIME_ZONE):\n    current_time = datetime.now().astimezone(tz=pytz.timezone(time_zone))\n    return current_time + timedelta(minutes=1)\ndef get_str_time_now(str_format='%Y-%m-%d_%H-%M-%S', time_zone=settings.TIME_ZONE):\n    current_time = get_current_time(time_zone)\n    return current_time.strftime(str_format)\ndef get_str_time_now_for_csv(str_format='%Y%m%d%H%M%S', time_zone=settings.TIME_ZONE):",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "get_current_time_plus_one_min",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def get_current_time_plus_one_min(time_zone=settings.TIME_ZONE):\n    current_time = datetime.now().astimezone(tz=pytz.timezone(time_zone))\n    return current_time + timedelta(minutes=1)\ndef get_str_time_now(str_format='%Y-%m-%d_%H-%M-%S', time_zone=settings.TIME_ZONE):\n    current_time = get_current_time(time_zone)\n    return current_time.strftime(str_format)\ndef get_str_time_now_for_csv(str_format='%Y%m%d%H%M%S', time_zone=settings.TIME_ZONE):\n    current_time = get_current_time(time_zone)\n    return current_time.strftime(str_format)\ndef get_upload_to(instance, filename):",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "get_str_time_now",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def get_str_time_now(str_format='%Y-%m-%d_%H-%M-%S', time_zone=settings.TIME_ZONE):\n    current_time = get_current_time(time_zone)\n    return current_time.strftime(str_format)\ndef get_str_time_now_for_csv(str_format='%Y%m%d%H%M%S', time_zone=settings.TIME_ZONE):\n    current_time = get_current_time(time_zone)\n    return current_time.strftime(str_format)\ndef get_upload_to(instance, filename):\n    return os.path.join(instance.UPLOAD_TO, str(instance.pk), filename.split('/')[-1])\ndef get_source_field_model(name_model, *args):\n    return '.'.join((name_model, *args))",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "get_str_time_now_for_csv",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def get_str_time_now_for_csv(str_format='%Y%m%d%H%M%S', time_zone=settings.TIME_ZONE):\n    current_time = get_current_time(time_zone)\n    return current_time.strftime(str_format)\ndef get_upload_to(instance, filename):\n    return os.path.join(instance.UPLOAD_TO, str(instance.pk), filename.split('/')[-1])\ndef get_source_field_model(name_model, *args):\n    return '.'.join((name_model, *args))\ndef str2bool(content):\n    return str(content).lower() in ('yes', 'true', 't', '1')\ndef generate_password(length_min: int = 7, length_max: int = 15):",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "get_upload_to",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def get_upload_to(instance, filename):\n    return os.path.join(instance.UPLOAD_TO, str(instance.pk), filename.split('/')[-1])\ndef get_source_field_model(name_model, *args):\n    return '.'.join((name_model, *args))\ndef str2bool(content):\n    return str(content).lower() in ('yes', 'true', 't', '1')\ndef generate_password(length_min: int = 7, length_max: int = 15):\n    \"\"\"\n    Generate password with input length.\n    Password include lowercase, uppercase, digit.",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "get_source_field_model",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def get_source_field_model(name_model, *args):\n    return '.'.join((name_model, *args))\ndef str2bool(content):\n    return str(content).lower() in ('yes', 'true', 't', '1')\ndef generate_password(length_min: int = 7, length_max: int = 15):\n    \"\"\"\n    Generate password with input length.\n    Password include lowercase, uppercase, digit.\n    Args:\n        length_min (int): mix length password, default is 7",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "str2bool",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def str2bool(content):\n    return str(content).lower() in ('yes', 'true', 't', '1')\ndef generate_password(length_min: int = 7, length_max: int = 15):\n    \"\"\"\n    Generate password with input length.\n    Password include lowercase, uppercase, digit.\n    Args:\n        length_min (int): mix length password, default is 7\n        length_max (int): max length password, default is 15\n    Returns:",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "generate_password",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def generate_password(length_min: int = 7, length_max: int = 15):\n    \"\"\"\n    Generate password with input length.\n    Password include lowercase, uppercase, digit.\n    Args:\n        length_min (int): mix length password, default is 7\n        length_max (int): max length password, default is 15\n    Returns:\n        Password value\n    \"\"\"",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "to_snake_case",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def to_snake_case(data) -> str:\n    return re.sub(r'' + RegexPattern.SNAKE_CASE.value, '_', data).lower()\n# Round value base on math logic\n# Example:\n# - 1.1 => 1\n# - 1.5 => 2\n# - 1.9 => 2\ndef round_half_up(n):\n    return int(math.floor(float(n) + 0.5) / 1)\n# Format digit value to currency format with comma every 3 integers",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "round_half_up",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def round_half_up(n):\n    return int(math.floor(float(n) + 0.5) / 1)\n# Format digit value to currency format with comma every 3 integers\n# Example:\n# - 10000.2345 => 10,000.2345\ndef currency_format(n):\n    return '{:,}'.format(n)\n# Convert datetime object to JST timezone\n# Replace string format\ndef convert_datetime_to_jst_str(date, jst_format):",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "currency_format",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def currency_format(n):\n    return '{:,}'.format(n)\n# Convert datetime object to JST timezone\n# Replace string format\ndef convert_datetime_to_jst_str(date, jst_format):\n    replace_tz = date.astimezone(pytz.timezone(settings.TIME_ZONE))\n    return replace_tz.strftime(jst_format)\n# Convert datetime object to JST timezone\n# Return date object\ndef convert_any_datetime_to_jst_date(dt: datetime) -> datetime.date:",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "convert_datetime_to_jst_str",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def convert_datetime_to_jst_str(date, jst_format):\n    replace_tz = date.astimezone(pytz.timezone(settings.TIME_ZONE))\n    return replace_tz.strftime(jst_format)\n# Convert datetime object to JST timezone\n# Return date object\ndef convert_any_datetime_to_jst_date(dt: datetime) -> datetime.date:\n    if not tz_aware(dt):\n        raise CustomAPIException(detail='Cant convert datetime without timezone attribute to JST timezone')\n    replace_tz = dt.astimezone(pytz.timezone(settings.TIME_ZONE))\n    return replace_tz.date()",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "convert_any_datetime_to_jst_date",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def convert_any_datetime_to_jst_date(dt: datetime) -> datetime.date:\n    if not tz_aware(dt):\n        raise CustomAPIException(detail='Cant convert datetime without timezone attribute to JST timezone')\n    replace_tz = dt.astimezone(pytz.timezone(settings.TIME_ZONE))\n    return replace_tz.date()\n# Check datetime object localized with timezone\ndef tz_aware(dt: datetime) -> bool:\n    return dt.tzinfo is not None and dt.tzinfo.utcoffset(dt) is not None\ndef convert_str_to_date(date_str, format=FormatDateTime.DATE_TIME.value):\n    \"\"\"",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "tz_aware",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def tz_aware(dt: datetime) -> bool:\n    return dt.tzinfo is not None and dt.tzinfo.utcoffset(dt) is not None\ndef convert_str_to_date(date_str, format=FormatDateTime.DATE_TIME.value):\n    \"\"\"\n    Todo: Convert date string to date with specific date format.\n    \"\"\"\n    try:\n        return datetime.strptime(date_str, format)\n    except Exception:\n        return None",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "convert_str_to_date",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def convert_str_to_date(date_str, format=FormatDateTime.DATE_TIME.value):\n    \"\"\"\n    Todo: Convert date string to date with specific date format.\n    \"\"\"\n    try:\n        return datetime.strptime(date_str, format)\n    except Exception:\n        return None\ndef convert_str_to_date_only(date_str, format=FormatDateTime.DATE_TIME.value):\n    \"\"\"",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "convert_str_to_date_only",
        "kind": 2,
        "importPath": "gpt_base.common.utils.strings",
        "description": "gpt_base.common.utils.strings",
        "peekOfCode": "def convert_str_to_date_only(date_str, format=FormatDateTime.DATE_TIME.value):\n    \"\"\"\n    Todo: Convert date string to date with specific date format.\n    \"\"\"\n    try:\n        return datetime.strptime(date_str, format).date()\n    except Exception:\n        return None",
        "detail": "gpt_base.common.utils.strings",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.conversations.migrations.0001_initial",
        "description": "gpt_base.conversations.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Chat',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "gpt_base.conversations.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.conversations.migrations.0002_initial",
        "description": "gpt_base.conversations.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('conversations', '0001_initial'),\n        ('members', '0001_initial'),\n        ('master', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='conversations',",
        "detail": "gpt_base.conversations.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.conversations.migrations.0003_remove_chat_is_error_remove_chat_is_loading",
        "description": "gpt_base.conversations.migrations.0003_remove_chat_is_error_remove_chat_is_loading",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('conversations', '0002_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='chat',\n            name='is_error',\n        ),\n        migrations.RemoveField(",
        "detail": "gpt_base.conversations.migrations.0003_remove_chat_is_error_remove_chat_is_loading",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.conversations.migrations.0004_alter_chat_translate_type",
        "description": "gpt_base.conversations.migrations.0004_alter_chat_translate_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('master', '0001_initial'),\n        ('conversations', '0003_remove_chat_is_error_remove_chat_is_loading'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='chat',\n            name='translate_type',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='master.translatetypesmaster'),",
        "detail": "gpt_base.conversations.migrations.0004_alter_chat_translate_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.conversations.migrations.0005_remove_chat_is_inverse_chat_role",
        "description": "gpt_base.conversations.migrations.0005_remove_chat_is_inverse_chat_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('conversations', '0004_alter_chat_translate_type'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='chat',\n            name='is_inverse',\n        ),\n        migrations.AddField(",
        "detail": "gpt_base.conversations.migrations.0005_remove_chat_is_inverse_chat_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.conversations.migrations.0006_alter_chat_role",
        "description": "gpt_base.conversations.migrations.0006_alter_chat_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('conversations', '0005_remove_chat_is_inverse_chat_role'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='chat',\n            name='role',\n            field=models.IntegerField(default='user'),\n        ),",
        "detail": "gpt_base.conversations.migrations.0006_alter_chat_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.conversations.migrations.0007_alter_chat_name",
        "description": "gpt_base.conversations.migrations.0007_alter_chat_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('conversations', '0006_alter_chat_role'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='chat',\n            name='name',\n            field=models.CharField(blank=True, max_length=100),\n        ),",
        "detail": "gpt_base.conversations.migrations.0007_alter_chat_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.conversations.migrations.0008_alter_chat_role",
        "description": "gpt_base.conversations.migrations.0008_alter_chat_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('conversations', '0007_alter_chat_name'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='chat',\n            name='role',\n            field=models.CharField(default='user', max_length=100),\n        ),",
        "detail": "gpt_base.conversations.migrations.0008_alter_chat_role",
        "documentation": {}
    },
    {
        "label": "Conversations",
        "kind": 6,
        "importPath": "gpt_base.conversations.models.conversations",
        "description": "gpt_base.conversations.models.conversations",
        "peekOfCode": "class Conversations(DateTimeModel):\n    member = models.ForeignKey(Members, related_name=RelatedName.MEMBERS_CONVERSATIONS.value, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    class Meta:\n        db_table = DBTable.CONVERSATIONS.value\n        app_label = ModelAppLabel.CONVERSATIONS.value\n        verbose_name_plural = VerboseNamePlural.CONVERSATIONS.value\nclass Chat(DateTimeModel):\n    conversation = models.ForeignKey(Conversations, related_name=RelatedName.CONVERSATIONS_CHATS.value, on_delete=models.CASCADE)\n    prompt = models.TextField(blank=True)",
        "detail": "gpt_base.conversations.models.conversations",
        "documentation": {}
    },
    {
        "label": "Chat",
        "kind": 6,
        "importPath": "gpt_base.conversations.models.conversations",
        "description": "gpt_base.conversations.models.conversations",
        "peekOfCode": "class Chat(DateTimeModel):\n    conversation = models.ForeignKey(Conversations, related_name=RelatedName.CONVERSATIONS_CHATS.value, on_delete=models.CASCADE)\n    prompt = models.TextField(blank=True)\n    content = models.TextField(blank=True)\n    content_translate = models.TextField(blank=True)\n    translate_type = models.ForeignKey(TranslateTypesMaster, on_delete=models.CASCADE, null=True)\n    role = models.CharField(default=RoleEnum.USER.value, max_length=100)\n    name = models.CharField(max_length=100, blank=True)\n    class Meta:\n        db_table = DBTable.CHATS.value",
        "detail": "gpt_base.conversations.models.conversations",
        "documentation": {}
    },
    {
        "label": "ConversationsDetailUpdateSerializer",
        "kind": 6,
        "importPath": "gpt_base.conversations.serializers.conversations",
        "description": "gpt_base.conversations.serializers.conversations",
        "peekOfCode": "class ConversationsDetailUpdateSerializer(WritableNestedModelSerializer):\n    member = MembersDetailUpdateSerializer(many=False)\n    class Meta:\n        model = Conversations\n        fields = (\n            DBConversationsFields.ID.value, \n            DBConversationsFields.MEMBER.value, \n            DBConversationsFields.NAME.value, \n        )",
        "detail": "gpt_base.conversations.serializers.conversations",
        "documentation": {}
    },
    {
        "label": "ChatBaseService",
        "kind": 6,
        "importPath": "gpt_base.conversations.services.chat",
        "description": "gpt_base.conversations.services.chat",
        "peekOfCode": "class ChatBaseService:\n    @staticmethod\n    def init():\n        pass",
        "detail": "gpt_base.conversations.services.chat",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_base.conversations.services.chat",
        "description": "gpt_base.conversations.services.chat",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ChatBaseService:\n    @staticmethod\n    def init():\n        pass",
        "detail": "gpt_base.conversations.services.chat",
        "documentation": {}
    },
    {
        "label": "ConversationsBaseService",
        "kind": 6,
        "importPath": "gpt_base.conversations.services.conversations",
        "description": "gpt_base.conversations.services.conversations",
        "peekOfCode": "class ConversationsBaseService:\n    @staticmethod\n    def init():\n        pass",
        "detail": "gpt_base.conversations.services.conversations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_base.conversations.services.conversations",
        "description": "gpt_base.conversations.services.conversations",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ConversationsBaseService:\n    @staticmethod\n    def init():\n        pass",
        "detail": "gpt_base.conversations.services.conversations",
        "documentation": {}
    },
    {
        "label": "ConversationsAdmin",
        "kind": 6,
        "importPath": "gpt_base.conversations.admin",
        "description": "gpt_base.conversations.admin",
        "peekOfCode": "class ConversationsAdmin(admin.ModelAdmin):\n    model = Conversations\n    list_display = ['id', 'name']\nadmin.site.register(Conversations, ConversationsAdmin)\nclass ChatAdmin(admin.ModelAdmin):\n    model = Chat\n    list_display = ['id', 'prompt', 'content', 'role']\n    search_fields = ['conversation__pk']\nadmin.site.register(Chat, ChatAdmin)",
        "detail": "gpt_base.conversations.admin",
        "documentation": {}
    },
    {
        "label": "ChatAdmin",
        "kind": 6,
        "importPath": "gpt_base.conversations.admin",
        "description": "gpt_base.conversations.admin",
        "peekOfCode": "class ChatAdmin(admin.ModelAdmin):\n    model = Chat\n    list_display = ['id', 'prompt', 'content', 'role']\n    search_fields = ['conversation__pk']\nadmin.site.register(Chat, ChatAdmin)",
        "detail": "gpt_base.conversations.admin",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "gpt_base.conversations.apps",
        "description": "gpt_base.conversations.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'gpt_base.conversations'",
        "detail": "gpt_base.conversations.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.documents.migrations.0001_initial",
        "description": "gpt_base.documents.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('members', '0002_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Templates',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "gpt_base.documents.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.documents.migrations.0002_templates_content_templates_icon_and_more",
        "description": "gpt_base.documents.migrations.0002_templates_content_templates_icon_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('documents', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='templates',\n            name='content',\n            field=models.CharField(max_length=2555, null=True),\n        ),",
        "detail": "gpt_base.documents.migrations.0002_templates_content_templates_icon_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.documents.migrations.0003_templates_question_asked",
        "description": "gpt_base.documents.migrations.0003_templates_question_asked",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('documents', '0002_templates_content_templates_icon_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='templates',\n            name='question_asked',\n            field=models.TextField(null=True),\n        ),",
        "detail": "gpt_base.documents.migrations.0003_templates_question_asked",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.documents.migrations.0004_documents_member_documents_name",
        "description": "gpt_base.documents.migrations.0004_documents_member_documents_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('members', '0002_initial'),\n        ('documents', '0003_templates_question_asked'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='documents',\n            name='member',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents_members', to='members.members'),",
        "detail": "gpt_base.documents.migrations.0004_documents_member_documents_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.documents.migrations.0005_documents_language",
        "description": "gpt_base.documents.migrations.0005_documents_language",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('documents', '0004_documents_member_documents_name'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='documents',\n            name='language',\n            field=models.CharField(default='Vietnamese', max_length=255),\n            preserve_default=False,",
        "detail": "gpt_base.documents.migrations.0005_documents_language",
        "documentation": {}
    },
    {
        "label": "Templates",
        "kind": 6,
        "importPath": "gpt_base.documents.models.documents",
        "description": "gpt_base.documents.models.documents",
        "peekOfCode": "class Templates(DateTimeModel):\n    name = models.CharField(max_length = 255)\n    params = models.TextField()\n    html = models.TextField()\n    content = models.CharField(max_length = 2555 , null = True)\n    text_feature_button = models.CharField(max_length = 255, null = True)\n    icon = models.CharField(max_length = 255 , null = True)\n    question_asked = models.TextField(null = True)\n    class Meta:\n        db_table = DBTable.TEMPLATES.value",
        "detail": "gpt_base.documents.models.documents",
        "documentation": {}
    },
    {
        "label": "WorkBooks",
        "kind": 6,
        "importPath": "gpt_base.documents.models.documents",
        "description": "gpt_base.documents.models.documents",
        "peekOfCode": "class WorkBooks(DateTimeModel):\n    name = models.CharField(max_length = 255)\n    quantity_document = models.IntegerField(default=0)\n    member = models.ForeignKey(Members, related_name=RelatedName.WORKBOOKS_MEMBERS.value, on_delete=models.CASCADE)\n    class Meta:\n        db_table = DBTable.WORK_BOOKS.value\nclass Documents(DateTimeModel):\n    content = models.TextField()\n    params_value = models.TextField()\n    workbook = models.ForeignKey(WorkBooks, related_name=RelatedName.DOCUMENTS_WORKBOOK.value, on_delete=models.CASCADE)",
        "detail": "gpt_base.documents.models.documents",
        "documentation": {}
    },
    {
        "label": "Documents",
        "kind": 6,
        "importPath": "gpt_base.documents.models.documents",
        "description": "gpt_base.documents.models.documents",
        "peekOfCode": "class Documents(DateTimeModel):\n    content = models.TextField()\n    params_value = models.TextField()\n    workbook = models.ForeignKey(WorkBooks, related_name=RelatedName.DOCUMENTS_WORKBOOK.value, on_delete=models.CASCADE)\n    template = models.ForeignKey(Templates, related_name=RelatedName.DOCUMENTS_TEMPLATES.value, on_delete=models.CASCADE)\n    member = models.ForeignKey(Members, null= True, related_name=RelatedName.DOCUMENTS_MEMBERS.value, on_delete=models.CASCADE)\n    name = models.CharField(max_length = 255 , null = True)\n    language = models.CharField(max_length = 255 )\n    class Meta:\n        db_table = DBTable.DOCUMENTS.value",
        "detail": "gpt_base.documents.models.documents",
        "documentation": {}
    },
    {
        "label": "TemplatesAdmin",
        "kind": 6,
        "importPath": "gpt_base.documents.admin",
        "description": "gpt_base.documents.admin",
        "peekOfCode": "class TemplatesAdmin(admin.ModelAdmin):\n    model = Templates\n    list_display = ['id', 'name']\nadmin.site.register(Templates , TemplatesAdmin)\nclass WorkBooksAdmin(admin.ModelAdmin):\n    model = WorkBooks\n    list_display = ['id', 'name']\nadmin.site.register(WorkBooks, WorkBooksAdmin)\nclass DocumentsAdmin(admin.ModelAdmin):\n    model = Documents",
        "detail": "gpt_base.documents.admin",
        "documentation": {}
    },
    {
        "label": "WorkBooksAdmin",
        "kind": 6,
        "importPath": "gpt_base.documents.admin",
        "description": "gpt_base.documents.admin",
        "peekOfCode": "class WorkBooksAdmin(admin.ModelAdmin):\n    model = WorkBooks\n    list_display = ['id', 'name']\nadmin.site.register(WorkBooks, WorkBooksAdmin)\nclass DocumentsAdmin(admin.ModelAdmin):\n    model = Documents\n    list_display = ['id', 'workbook_id']\nadmin.site.register(Documents, DocumentsAdmin)",
        "detail": "gpt_base.documents.admin",
        "documentation": {}
    },
    {
        "label": "DocumentsAdmin",
        "kind": 6,
        "importPath": "gpt_base.documents.admin",
        "description": "gpt_base.documents.admin",
        "peekOfCode": "class DocumentsAdmin(admin.ModelAdmin):\n    model = Documents\n    list_display = ['id', 'workbook_id']\nadmin.site.register(Documents, DocumentsAdmin)",
        "detail": "gpt_base.documents.admin",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "gpt_base.documents.apps",
        "description": "gpt_base.documents.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'gpt_base.documents'",
        "detail": "gpt_base.documents.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.master.migrations.0001_initial",
        "description": "gpt_base.master.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TranslateTypesMaster',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(db_index=True, max_length=255)),",
        "detail": "gpt_base.master.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "TranslateTypesMaster",
        "kind": 6,
        "importPath": "gpt_base.master.models.translate_types",
        "description": "gpt_base.master.models.translate_types",
        "peekOfCode": "class TranslateTypesMaster(MaterBaseModel):\n    class Meta:\n        db_table = DBTable.M_TRANSLATE_TYPES.value\n        app_label = ModelAppLabel.MASTER.value",
        "detail": "gpt_base.master.models.translate_types",
        "documentation": {}
    },
    {
        "label": "TranslateTypesMasterAdmin",
        "kind": 6,
        "importPath": "gpt_base.master.admin",
        "description": "gpt_base.master.admin",
        "peekOfCode": "class TranslateTypesMasterAdmin(admin.ModelAdmin):\n    model = TranslateTypesMaster\n    list_display = ['id', 'name', 'delete_flag']\nadmin.site.register(TranslateTypesMaster, TranslateTypesMasterAdmin)",
        "detail": "gpt_base.master.admin",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "gpt_base.master.apps",
        "description": "gpt_base.master.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'gpt_base.master'",
        "detail": "gpt_base.master.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.members.migrations.0001_initial",
        "description": "gpt_base.members.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Members',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "gpt_base.members.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.members.migrations.0002_initial",
        "description": "gpt_base.members.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('members', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='members',\n            name='user',",
        "detail": "gpt_base.members.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "Members",
        "kind": 6,
        "importPath": "gpt_base.members.models.members",
        "description": "gpt_base.members.models.members",
        "peekOfCode": "class Members(DateTimeModel):\n    user = models.OneToOneField(User, related_name=RelatedName.USER_MEMBERS.value, on_delete=models.RESTRICT, null=True)\n    token_limit = models.IntegerField(default=100000)\n    quantity_token_used = models.IntegerField(default=0)\n    class Meta:\n        db_table = DBTable.MEMBERS.value\n        app_label = ModelAppLabel.MEMBERS.value\n        verbose_name_plural = VerboseNamePlural.MEMBERS.value",
        "detail": "gpt_base.members.models.members",
        "documentation": {}
    },
    {
        "label": "MembersDetailUpdateSerializer",
        "kind": 6,
        "importPath": "gpt_base.members.serializers.members",
        "description": "gpt_base.members.serializers.members",
        "peekOfCode": "class MembersDetailUpdateSerializer(WritableNestedModelSerializer):\n    user = UserInfoSerializer(many=False)\n    class Meta:\n        model = Members\n        fields = (\n            DBMembersFields.ID.value, \n            DBMembersFields.USER.value, \n            DBMembersFields.TOKEN_LIMIT.value, \n            DBMembersFields.QUANTITY_TOKEN_USED.value, \n        )",
        "detail": "gpt_base.members.serializers.members",
        "documentation": {}
    },
    {
        "label": "MembersBaseService",
        "kind": 6,
        "importPath": "gpt_base.members.services.members",
        "description": "gpt_base.members.services.members",
        "peekOfCode": "class MembersBaseService:\n    @staticmethod\n    def get_member_by_id(user_id):\n        logger.debug('Service: get_member_by_id called.')\n        logger.debug('Service: get_member_by_id called with user id: %s.', user_id)\n        try:\n            user = Members.objects.get(user_id=user_id)\n            logger.debug('Service: get_member_by_id called success.')\n            return user\n        except Members.DoesNotExist:",
        "detail": "gpt_base.members.services.members",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_base.members.services.members",
        "description": "gpt_base.members.services.members",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass MembersBaseService:\n    @staticmethod\n    def get_member_by_id(user_id):\n        logger.debug('Service: get_member_by_id called.')\n        logger.debug('Service: get_member_by_id called with user id: %s.', user_id)\n        try:\n            user = Members.objects.get(user_id=user_id)\n            logger.debug('Service: get_member_by_id called success.')\n            return user",
        "detail": "gpt_base.members.services.members",
        "documentation": {}
    },
    {
        "label": "MembersAdmin",
        "kind": 6,
        "importPath": "gpt_base.members.admin",
        "description": "gpt_base.members.admin",
        "peekOfCode": "class MembersAdmin(admin.ModelAdmin):\n    model = Members\n    list_display = ['id', 'token_limit', 'quantity_token_used']\nadmin.site.register(Members, MembersAdmin)",
        "detail": "gpt_base.members.admin",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "gpt_base.members.apps",
        "description": "gpt_base.members.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'gpt_base.members'",
        "detail": "gpt_base.members.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.prompts.migrations.0001_initial",
        "description": "gpt_base.prompts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('members', '0002_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Prompts',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "gpt_base.prompts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.prompts.migrations.0002_alter_prompts_title",
        "description": "gpt_base.prompts.migrations.0002_alter_prompts_title",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('prompts', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='prompts',\n            name='title',\n            field=models.CharField(max_length=256),\n        ),",
        "detail": "gpt_base.prompts.migrations.0002_alter_prompts_title",
        "documentation": {}
    },
    {
        "label": "Prompts",
        "kind": 6,
        "importPath": "gpt_base.prompts.models.prompts",
        "description": "gpt_base.prompts.models.prompts",
        "peekOfCode": "class Prompts(DateTimeModel):\n    member = models.ForeignKey(Members, related_name=RelatedName.MEMBERS_PROMPTS.value, on_delete=models.CASCADE)\n    title = models.CharField(max_length = 256)\n    description = models.TextField()\n    class Meta:\n        db_table = DBTable.PROMPTS.value\n        app_label = ModelAppLabel.PROMPTS.value\n        verbose_name_plural = VerboseNamePlural.PROMPTS.value",
        "detail": "gpt_base.prompts.models.prompts",
        "documentation": {}
    },
    {
        "label": "PromptsAdmin",
        "kind": 6,
        "importPath": "gpt_base.prompts.admin",
        "description": "gpt_base.prompts.admin",
        "peekOfCode": "class PromptsAdmin(admin.ModelAdmin):\n    model = Prompts\n    list_display = ['id', 'title', 'description' , 'created_at','updated_at']\nadmin.site.register(Prompts, PromptsAdmin)",
        "detail": "gpt_base.prompts.admin",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "gpt_base.prompts.apps",
        "description": "gpt_base.prompts.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'gpt_base.prompts'",
        "detail": "gpt_base.prompts.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gpt_base.user.migrations.0001_initial",
        "description": "gpt_base.user.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "gpt_base.user.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "gpt_base.user.models.user",
        "description": "gpt_base.user.models.user",
        "peekOfCode": "class User(CustomBaseUserModel):\n    first_name = models.CharField(('first name'), max_length=30, null=True, blank=True)\n    last_name = models.CharField(('last name'), max_length=150, null=True, blank=True)\n    new_email = models.EmailField(max_length=255, unique=True, null=True, blank=True)\n    email_updated_date = models.DateTimeField(null=True, blank=True)\n    is_verified_mail = models.BooleanField(default=False)\n    is_receive_mail = models.BooleanField(default=False)\n    delete_flag = models.BooleanField(default=False)\n    class Meta:\n        db_table = DBTable.USER.value",
        "detail": "gpt_base.user.models.user",
        "documentation": {}
    },
    {
        "label": "UserInfoSerializer",
        "kind": 6,
        "importPath": "gpt_base.user.serializers.user",
        "description": "gpt_base.user.serializers.user",
        "peekOfCode": "class UserInfoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = (\n            DBUserFields.ID.value, \n            DBUserFields.EMAIL.value, \n            DBUserFields.FIRST_NAME.value,\n            DBUserFields.LAST_NAME.value,\n        )\nclass UserBaseSerializer(serializers.ModelSerializer):",
        "detail": "gpt_base.user.serializers.user",
        "documentation": {}
    },
    {
        "label": "UserBaseSerializer",
        "kind": 6,
        "importPath": "gpt_base.user.serializers.user",
        "description": "gpt_base.user.serializers.user",
        "peekOfCode": "class UserBaseSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = (\n            DBUserFields.ID.value,\n            DBUserFields.FIRST_NAME.value,\n            DBUserFields.LAST_NAME.value,\n        )",
        "detail": "gpt_base.user.serializers.user",
        "documentation": {}
    },
    {
        "label": "UserBaseService",
        "kind": 6,
        "importPath": "gpt_base.user.services.user",
        "description": "gpt_base.user.services.user",
        "peekOfCode": "class UserBaseService:\n    @staticmethod\n    def get_user_by_id(user_id):\n        logger.debug('Service: get_user_by_id called.')\n        logger.debug('Service: get_user_by_id called with user id: %s.', user_id)\n        try:\n            user = User.objects.get(id=user_id)\n            logger.debug('Service: get_user_by_id called success.')\n            return user\n        except User.DoesNotExist:",
        "detail": "gpt_base.user.services.user",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_base.user.services.user",
        "description": "gpt_base.user.services.user",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass UserBaseService:\n    @staticmethod\n    def get_user_by_id(user_id):\n        logger.debug('Service: get_user_by_id called.')\n        logger.debug('Service: get_user_by_id called with user id: %s.', user_id)\n        try:\n            user = User.objects.get(id=user_id)\n            logger.debug('Service: get_user_by_id called success.')\n            return user",
        "detail": "gpt_base.user.services.user",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "gpt_base.user.admin",
        "description": "gpt_base.user.admin",
        "peekOfCode": "class UserAdmin(admin.ModelAdmin):\n    model = User\n    list_display = ['id', 'email', 'first_name', 'last_name', 'is_verified_mail', 'is_active', 'is_superuser', 'is_staff', 'date_joined']\nadmin.site.register(User, UserAdmin)",
        "detail": "gpt_base.user.admin",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "gpt_base.user.apps",
        "description": "gpt_base.user.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'gpt_base.user'",
        "detail": "gpt_base.user.apps",
        "documentation": {}
    },
    {
        "label": "BaseConfig",
        "kind": 6,
        "importPath": "gpt_base.apps",
        "description": "gpt_base.apps",
        "peekOfCode": "class BaseConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'gpt_base'\n    def ready(self):\n        for name in inspect.signature(decimal.Context).parameters:\n            if name == 'prec':\n                setattr(decimal.DefaultContext, name, 65)\n        decimal.setcontext(decimal.DefaultContext)",
        "detail": "gpt_base.apps",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Initialise environment variables\nenv = environ.Env()\nenv.read_env(str(BASE_DIR / \".env\"))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env.str(\"SECRET_KEY\", default=\"django-insecure-0xj-&j(@9t40^uro)a8=*9s#9-7%(*pe0ior33b3kuq1$z*vj9\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env.bool(\"DEBUG\", default=True)",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "env = environ.Env()\nenv.read_env(str(BASE_DIR / \".env\"))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env.str(\"SECRET_KEY\", default=\"django-insecure-0xj-&j(@9t40^uro)a8=*9s#9-7%(*pe0ior33b3kuq1$z*vj9\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env.bool(\"DEBUG\", default=True)\nALLOWED_HOSTS = env.list(\"ALLOWED_HOSTS\", default=['*'])\n# Application definition",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "SECRET_KEY = env.str(\"SECRET_KEY\", default=\"django-insecure-0xj-&j(@9t40^uro)a8=*9s#9-7%(*pe0ior33b3kuq1$z*vj9\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env.bool(\"DEBUG\", default=True)\nALLOWED_HOSTS = env.list(\"ALLOWED_HOSTS\", default=['*'])\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "DEBUG = env.bool(\"DEBUG\", default=True)\nALLOWED_HOSTS = env.list(\"ALLOWED_HOSTS\", default=['*'])\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "ALLOWED_HOSTS = env.list(\"ALLOWED_HOSTS\", default=['*'])\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework_simplejwt',\n    'corsheaders',",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "INSTALLED_APPS = list(INSTALLED_APPS)\nINSTALLED_APPS.append('gpt_base.apps.BaseConfig')\nMIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",  # It was placed on the top\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",  # It was placed on the top\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'gpt_base.common.utils.middleware.CorrelationMiddleware'",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = env.list(\"CSRF_TRUSTED_ORIGINS\", default=[])\nROOT_URLCONF = 'gpt_base.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'gpt_base/templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "ROOT_URLCONF = 'gpt_base.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'gpt_base/templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'gpt_base/templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "WSGI_APPLICATION = 'gpt_base.wsgi.application'\n# CORS\nCORS_ALLOW_ALL_ORIGINS = env.bool('CORS_ALLOW_ALL_ORIGINS', default=False)\nCORS_ALLOWED_ORIGINS = env.list(\"CORS_ALLOWED_ORIGINS\", default=[])\nCORS_ALLOW_HEADERS = list(default_headers) + ['cookies', 'ads-code']\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        \"ENGINE\": env.str(\"DB_ENGINE\"),",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = env.bool('CORS_ALLOW_ALL_ORIGINS', default=False)\nCORS_ALLOWED_ORIGINS = env.list(\"CORS_ALLOWED_ORIGINS\", default=[])\nCORS_ALLOW_HEADERS = list(default_headers) + ['cookies', 'ads-code']\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        \"ENGINE\": env.str(\"DB_ENGINE\"),\n        \"NAME\": env.str(\"DB_NAME\"),\n        \"USER\": env.str(\"DB_USER\"),",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = env.list(\"CORS_ALLOWED_ORIGINS\", default=[])\nCORS_ALLOW_HEADERS = list(default_headers) + ['cookies', 'ads-code']\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        \"ENGINE\": env.str(\"DB_ENGINE\"),\n        \"NAME\": env.str(\"DB_NAME\"),\n        \"USER\": env.str(\"DB_USER\"),\n        \"PASSWORD\": env.str(\"DB_PASSWORD\"),",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_HEADERS",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "CORS_ALLOW_HEADERS = list(default_headers) + ['cookies', 'ads-code']\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        \"ENGINE\": env.str(\"DB_ENGINE\"),\n        \"NAME\": env.str(\"DB_NAME\"),\n        \"USER\": env.str(\"DB_USER\"),\n        \"PASSWORD\": env.str(\"DB_PASSWORD\"),\n        \"HOST\": env.str(\"DB_HOST\"),",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        \"ENGINE\": env.str(\"DB_ENGINE\"),\n        \"NAME\": env.str(\"DB_NAME\"),\n        \"USER\": env.str(\"DB_USER\"),\n        \"PASSWORD\": env.str(\"DB_PASSWORD\"),\n        \"HOST\": env.str(\"DB_HOST\"),\n        \"PORT\": env.str(\"DB_PORT\"),\n    }\n}",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nPROJECT_DIR = os.path.dirname(os.path.abspath(__file__))\nSTATIC_ROOT = os.path.join(PROJECT_DIR, 'static')\n# Default primary key field type",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nPROJECT_DIR = os.path.dirname(os.path.abspath(__file__))\nSTATIC_ROOT = os.path.join(PROJECT_DIR, 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nPROJECT_DIR = os.path.dirname(os.path.abspath(__file__))\nSTATIC_ROOT = os.path.join(PROJECT_DIR, 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nPROJECT_DIR = os.path.dirname(os.path.abspath(__file__))\nSTATIC_ROOT = os.path.join(PROJECT_DIR, 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# ---------------------------------------------------------------------------- #",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nPROJECT_DIR = os.path.dirname(os.path.abspath(__file__))\nSTATIC_ROOT = os.path.join(PROJECT_DIR, 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# ---------------------------------------------------------------------------- #\n#                                 TRANSLATION                                  #\n# ---------------------------------------------------------------------------- #\n# ---------------------------------------------------------------------------- #",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "PROJECT_DIR",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))\nSTATIC_ROOT = os.path.join(PROJECT_DIR, 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# ---------------------------------------------------------------------------- #\n#                                 TRANSLATION                                  #\n# ---------------------------------------------------------------------------- #\n# ---------------------------------------------------------------------------- #\n#                                    AUTH                                      #",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(PROJECT_DIR, 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# ---------------------------------------------------------------------------- #\n#                                 TRANSLATION                                  #\n# ---------------------------------------------------------------------------- #\n# ---------------------------------------------------------------------------- #\n#                                    AUTH                                      #\n# ---------------------------------------------------------------------------- #",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# ---------------------------------------------------------------------------- #\n#                                 TRANSLATION                                  #\n# ---------------------------------------------------------------------------- #\n# ---------------------------------------------------------------------------- #\n#                                    AUTH                                      #\n# ---------------------------------------------------------------------------- #\nAUTH_USER_MODEL = 'user.User'\nREST_FRAMEWORK = {\n    'DATETIME_FORMAT': \"%Y-%m-%d %H:%M:%S.%f%z\",",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'user.User'\nREST_FRAMEWORK = {\n    'DATETIME_FORMAT': \"%Y-%m-%d %H:%M:%S.%f%z\",\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        # 'gpt_base.common.custom.authentication.CustomJWTAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DATETIME_FORMAT': \"%Y-%m-%d %H:%M:%S.%f%z\",\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        # 'gpt_base.common.custom.authentication.CustomJWTAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "UPDATE_LAST_LOGIN",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "UPDATE_LAST_LOGIN = True\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=env.float(\"ACCESS_TOKEN_LIFETIME\")),\n    'REFRESH_TOKEN_LIFETIME': timedelta(seconds=env.float(\"REFRESH_TOKEN_LIFETIME\")),\n    'AUTH_TOKEN_CLASSES': (\n        'rest_framework_simplejwt.tokens.AccessToken',\n    ),\n    'UPDATE_LAST_LOGIN': False,\n    'ROTATE_REFRESH_TOKENS': True,",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=env.float(\"ACCESS_TOKEN_LIFETIME\")),\n    'REFRESH_TOKEN_LIFETIME': timedelta(seconds=env.float(\"REFRESH_TOKEN_LIFETIME\")),\n    'AUTH_TOKEN_CLASSES': (\n        'rest_framework_simplejwt.tokens.AccessToken',\n    ),\n    'UPDATE_LAST_LOGIN': False,\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_CRYPTO_FIELD_KEY",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "EMAIL_CRYPTO_FIELD_KEY = env.str(\"EMAIL_CRYPTO_FIELD_KEY\")\n# ---------------------------------------------------------------------------- #\n#                                 SWAGGER                                      #\n# ---------------------------------------------------------------------------- #\nDISPLAY_SWAGGER = env.bool(\"DISPLAY_SWAGGER\", True)\nSPECTACULAR_SETTINGS = {\n    'TITLE': 'PSCD-GPT Api',\n    'DESCRIPTION': 'PSCD-GPT Api',\n    'VERSION': '1.0.0',\n    'SERVE_INCLUDE_SCHEMA': False,",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "DISPLAY_SWAGGER",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "DISPLAY_SWAGGER = env.bool(\"DISPLAY_SWAGGER\", True)\nSPECTACULAR_SETTINGS = {\n    'TITLE': 'PSCD-GPT Api',\n    'DESCRIPTION': 'PSCD-GPT Api',\n    'VERSION': '1.0.0',\n    'SERVE_INCLUDE_SCHEMA': False,\n    'COMPONENT_SPLIT_REQUEST': True,\n    'SCHEMA_PATH_PREFIX': '/api',\n}\n# ---------------------------------------------------------------------------- #",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "SPECTACULAR_SETTINGS",
        "kind": 5,
        "importPath": "gpt_base.settings",
        "description": "gpt_base.settings",
        "peekOfCode": "SPECTACULAR_SETTINGS = {\n    'TITLE': 'PSCD-GPT Api',\n    'DESCRIPTION': 'PSCD-GPT Api',\n    'VERSION': '1.0.0',\n    'SERVE_INCLUDE_SCHEMA': False,\n    'COMPONENT_SPLIT_REQUEST': True,\n    'SCHEMA_PATH_PREFIX': '/api',\n}\n# ---------------------------------------------------------------------------- #\n#                                    LOGS                                      #",
        "detail": "gpt_base.settings",
        "documentation": {}
    },
    {
        "label": "swagger_view",
        "kind": 5,
        "importPath": "gpt_base.urls",
        "description": "gpt_base.urls",
        "peekOfCode": "swagger_view = []\nif settings.DISPLAY_SWAGGER:\n    swagger_view = [\n        path('', lambda request: redirect('api/', permanent=True)),\n        path(\n            'api/',\n            SpectacularSwaggerView.as_view(\n                template_name='swagger-ui.html',\n                url_name=\"schema\"\n            ),",
        "detail": "gpt_base.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "gpt_base.urls",
        "description": "gpt_base.urls",
        "peekOfCode": "urlpatterns = swagger_view + [\n    path('admin/', admin.site.urls),\n    path('api/auth/', include('gpt_base.auth.urls')),\n]",
        "detail": "gpt_base.urls",
        "documentation": {}
    },
    {
        "label": "ChatGPTService",
        "kind": 6,
        "importPath": "gpt_user.chat_gpt.services.chat_gpt",
        "description": "gpt_user.chat_gpt.services.chat_gpt",
        "peekOfCode": "class ChatGPTService(ChatGPTServiceBase):\n    def __init__(self):\n        super(ChatGPTService, self).__init__()\n        self.generate_response_content = \"\"\n    # Public methods\n    def chat_completion_member(\n        self,\n        conversation_id,\n        prompt,\n        request_user,",
        "detail": "gpt_user.chat_gpt.services.chat_gpt",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_user.chat_gpt.services.chat_gpt",
        "description": "gpt_user.chat_gpt.services.chat_gpt",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ChatGPTService(ChatGPTServiceBase):\n    def __init__(self):\n        super(ChatGPTService, self).__init__()\n        self.generate_response_content = \"\"\n    # Public methods\n    def chat_completion_member(\n        self,\n        conversation_id,\n        prompt,",
        "detail": "gpt_user.chat_gpt.services.chat_gpt",
        "documentation": {}
    },
    {
        "label": "process",
        "kind": 2,
        "importPath": "gpt_user.chat_gpt.views.view_api",
        "description": "gpt_user.chat_gpt.views.view_api",
        "peekOfCode": "def process(request):\n    gpt_service = ChatGPTService()\n    data = request.data\n    completion = gpt_service.chat_completion_member(\n        conversation_id=data.get('conversation_id', 2),\n        chat_id=data.get('chat_id'),\n        prompt=data.get('prompt'),\n        system_message=data.get('system_message'),\n        temperature=data.get('temperature'),\n        top_p=data.get('top_p'),",
        "detail": "gpt_user.chat_gpt.views.view_api",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "gpt_user.chat_gpt.urls",
        "description": "gpt_user.chat_gpt.urls",
        "peekOfCode": "urlpatterns = [\n    path('process', view_api.process, name='process-chat-gpt'),\n]",
        "detail": "gpt_user.chat_gpt.urls",
        "documentation": {}
    },
    {
        "label": "ChatListFilterSet",
        "kind": 6,
        "importPath": "gpt_user.conversations.filter.chats",
        "description": "gpt_user.conversations.filter.chats",
        "peekOfCode": "class ChatListFilterSet(django_filters.FilterSet):\n    conversation_id = django_filters.NumberFilter(field_name=DBChatsFields.CONVERSATION_ID.value)\n    class Meta:\n        model = Chat\n        fields = (\n            DBChatsFields.CONVERSATION_ID.value,\n        )",
        "detail": "gpt_user.conversations.filter.chats",
        "documentation": {}
    },
    {
        "label": "ConversationsDetailListSerializer",
        "kind": 6,
        "importPath": "gpt_user.conversations.serializers.conversations",
        "description": "gpt_user.conversations.serializers.conversations",
        "peekOfCode": "class ConversationsDetailListSerializer(serializers.ModelSerializer):\n    # member = MembersDetailUpdateSerializer(many=False)\n    class Meta:\n        model = Conversations\n        fields = (\n            DBConversationsFields.ID.value,\n            # DBConversationsFields.MEMBER.value,\n            DBConversationsFields.NAME.value,\n        )\nclass ConversationsCreateSerializer(WritableNestedModelSerializer):",
        "detail": "gpt_user.conversations.serializers.conversations",
        "documentation": {}
    },
    {
        "label": "ConversationsCreateSerializer",
        "kind": 6,
        "importPath": "gpt_user.conversations.serializers.conversations",
        "description": "gpt_user.conversations.serializers.conversations",
        "peekOfCode": "class ConversationsCreateSerializer(WritableNestedModelSerializer):\n    class Meta:\n        model = Conversations\n        fields = (\n            DBConversationsFields.NAME.value,\n        )\n    def create(self, validated_data, user):\n        member = Members.objects.get(user=user)\n        conversation = Conversations.objects.create(**validated_data, member=member)\n        data = {",
        "detail": "gpt_user.conversations.serializers.conversations",
        "documentation": {}
    },
    {
        "label": "ConversationsUpdateSerializer",
        "kind": 6,
        "importPath": "gpt_user.conversations.serializers.conversations",
        "description": "gpt_user.conversations.serializers.conversations",
        "peekOfCode": "class ConversationsUpdateSerializer(WritableNestedModelSerializer):\n    class Meta:\n        model = Conversations\n        fields = (\n            DBConversationsFields.NAME.value,\n        )\n# Chats\nclass ChatsDetailListSerializer(serializers.ModelSerializer):\n    # conversation_id = ForeignKeyField(model=Conversations)\n    # translate_type_id = ForeignKeyField(model=TranslateTypesMaster)",
        "detail": "gpt_user.conversations.serializers.conversations",
        "documentation": {}
    },
    {
        "label": "ChatsDetailListSerializer",
        "kind": 6,
        "importPath": "gpt_user.conversations.serializers.conversations",
        "description": "gpt_user.conversations.serializers.conversations",
        "peekOfCode": "class ChatsDetailListSerializer(serializers.ModelSerializer):\n    # conversation_id = ForeignKeyField(model=Conversations)\n    # translate_type_id = ForeignKeyField(model=TranslateTypesMaster)\n    is_inverse = serializers.SerializerMethodField('get_is_inverse')\n    class Meta:\n        model = Chat\n        fields =(\n            DBChatsFields.ID.value,\n            # DBChatsFields.CONVERSATION_ID.value,\n            DBChatsFields.PROMPT.value,",
        "detail": "gpt_user.conversations.serializers.conversations",
        "documentation": {}
    },
    {
        "label": "ChatsCreateSerializer",
        "kind": 6,
        "importPath": "gpt_user.conversations.serializers.conversations",
        "description": "gpt_user.conversations.serializers.conversations",
        "peekOfCode": "class ChatsCreateSerializer(WritableNestedModelSerializer):\n    conversation_id = ForeignKeyField(model=Conversations)\n    # translate_type_id = ForeignKeyField(model=TranslateTypesMaster, default=TranslateTypesEnum.ENGLISH.value)\n    class Meta:\n        model = Chat\n        fields =(\n            DBChatsFields.CONVERSATION_ID.value,\n            DBChatsFields.PROMPT.value,\n            DBChatsFields.CONTENT.value,\n            # DBChatsFields.TRANSLATE_TYPE_ID.value,",
        "detail": "gpt_user.conversations.serializers.conversations",
        "documentation": {}
    },
    {
        "label": "ChatsUpdateSerializer",
        "kind": 6,
        "importPath": "gpt_user.conversations.serializers.conversations",
        "description": "gpt_user.conversations.serializers.conversations",
        "peekOfCode": "class ChatsUpdateSerializer(WritableNestedModelSerializer):\n    conversation_id = ForeignKeyField(model=Conversations)\n    translate_type_id = ForeignKeyField(model=TranslateTypesMaster)\n    class Meta:\n        model = Chat\n        fields =(\n            DBChatsFields.CONVERSATION_ID.value,\n            DBChatsFields.PROMPT.value,\n            DBChatsFields.CONTENT.value,\n            DBChatsFields.CONTENT_TRANSLATE.value,",
        "detail": "gpt_user.conversations.serializers.conversations",
        "documentation": {}
    },
    {
        "label": "ChatService",
        "kind": 6,
        "importPath": "gpt_user.conversations.services.chat",
        "description": "gpt_user.conversations.services.chat",
        "peekOfCode": "class ChatService:\n    def __init__(self):\n        super(ChatService, self).__init__()\n        self.__chat_service = ChatBaseService()\n    #####################################################################################\n    # Public methods\n    #####################################################################################\n    def get_list(self, user, filtered_qs, serializer, conversation_id):\n        # check conversation param has permission\n        conversations = Conversations.objects.filter(pk=conversation_id, member__user=user)",
        "detail": "gpt_user.conversations.services.chat",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "gpt_user.conversations.services.chat",
        "description": "gpt_user.conversations.services.chat",
        "peekOfCode": "__all__ = ['ChatService']\nlogger = logging.getLogger(__name__)\nclass ChatService:\n    def __init__(self):\n        super(ChatService, self).__init__()\n        self.__chat_service = ChatBaseService()\n    #####################################################################################\n    # Public methods\n    #####################################################################################\n    def get_list(self, user, filtered_qs, serializer, conversation_id):",
        "detail": "gpt_user.conversations.services.chat",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_user.conversations.services.chat",
        "description": "gpt_user.conversations.services.chat",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ChatService:\n    def __init__(self):\n        super(ChatService, self).__init__()\n        self.__chat_service = ChatBaseService()\n    #####################################################################################\n    # Public methods\n    #####################################################################################\n    def get_list(self, user, filtered_qs, serializer, conversation_id):\n        # check conversation param has permission",
        "detail": "gpt_user.conversations.services.chat",
        "documentation": {}
    },
    {
        "label": "ConversationsService",
        "kind": 6,
        "importPath": "gpt_user.conversations.services.conversations",
        "description": "gpt_user.conversations.services.conversations",
        "peekOfCode": "class ConversationsService:\n    def __init__(self):\n        super(ConversationsService, self).__init__()\n        self.__conversations_service = ConversationsBaseService()\n    #####################################################################################\n    # Public methods\n    #####################################################################################\n    def get_list(self):\n        # check conversation param has permission\n        return",
        "detail": "gpt_user.conversations.services.conversations",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "gpt_user.conversations.services.conversations",
        "description": "gpt_user.conversations.services.conversations",
        "peekOfCode": "__all__ = ['ConversationsService']\nlogger = logging.getLogger(__name__)\nclass ConversationsService:\n    def __init__(self):\n        super(ConversationsService, self).__init__()\n        self.__conversations_service = ConversationsBaseService()\n    #####################################################################################\n    # Public methods\n    #####################################################################################\n    def get_list(self):",
        "detail": "gpt_user.conversations.services.conversations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_user.conversations.services.conversations",
        "description": "gpt_user.conversations.services.conversations",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ConversationsService:\n    def __init__(self):\n        super(ConversationsService, self).__init__()\n        self.__conversations_service = ConversationsBaseService()\n    #####################################################################################\n    # Public methods\n    #####################################################################################\n    def get_list(self):\n        # check conversation param has permission",
        "detail": "gpt_user.conversations.services.conversations",
        "documentation": {}
    },
    {
        "label": "ConversationViewSet",
        "kind": 6,
        "importPath": "gpt_user.conversations.views.view_set",
        "description": "gpt_user.conversations.views.view_set",
        "peekOfCode": "class ConversationViewSet(\n    mixins.CreateModelMixin, \n    mixins.DestroyModelMixin,\n    mixins.UpdateModelMixin,\n    mixins.ListModelMixin, \n    mixins.RetrieveModelMixin, \n    viewsets.GenericViewSet\n):\n    queryset = Conversations.objects.all()\n    serializer_classes = ConversationsDetailListSerializer",
        "detail": "gpt_user.conversations.views.view_set",
        "documentation": {}
    },
    {
        "label": "ChatViewSet",
        "kind": 6,
        "importPath": "gpt_user.conversations.views.view_set",
        "description": "gpt_user.conversations.views.view_set",
        "peekOfCode": "class ChatViewSet(\n    mixins.DestroyModelMixin,\n    mixins.UpdateModelMixin,\n    mixins.ListModelMixin, \n    mixins.RetrieveModelMixin, \n    viewsets.GenericViewSet\n):\n    queryset = Chat.objects.all()\n    serializer_classes = ChatsDetailListSerializer\n    permission_classes = (IsUserAuthenticated,)",
        "detail": "gpt_user.conversations.views.view_set",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "gpt_user.conversations.urls",
        "description": "gpt_user.conversations.urls",
        "peekOfCode": "urlpatterns = [\n    # Conversations\n    path('list', view=ConversationViewSet.as_view({'get': ViewSetAction.LIST.value})),\n    path('<int:pk>/detail', view=ConversationViewSet.as_view({'get': ViewSetAction.DETAIL.value})),\n    path('<int:pk>/update', view=ConversationViewSet.as_view({'put': ViewSetAction.UPDATE.value})),\n    path('<int:pk>/delete', view=ConversationViewSet.as_view({'delete': ViewSetAction.DELETE.value})),\n    path('<int:id>/delete-all-chat', view=ConversationViewSet.as_view({'delete': ConversationViewSetAction.DELETE_ALL_CHAT.value})),\n    path('create', view=ConversationViewSet.as_view({'post': ViewSetAction.CREATE.value})),\n    # Chats\n    path('chat/list', view=ChatViewSet.as_view({'get': ViewSetAction.LIST.value})),",
        "detail": "gpt_user.conversations.urls",
        "documentation": {}
    },
    {
        "label": "TemplateDetailListSerializer",
        "kind": 6,
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "peekOfCode": "class TemplateDetailListSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Templates\n        fields = (\n            DBTemplatesFields.ID.value,\n            DBTemplatesFields.ICON.value,\n            DBTemplatesFields.CONTENT.value,\n            DBTemplatesFields.TEXTFEATUREBUTTON.value\n        )\nclass TemplateDetailSerializer(serializers.ModelSerializer):",
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "TemplateDetailSerializer",
        "kind": 6,
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "peekOfCode": "class TemplateDetailSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Templates\n        fields = (\n            DBTemplatesFields.ID.value,\n            DBTemplatesFields.NAME.value,\n            DBTemplatesFields.PARAMS.value,\n            DBTemplatesFields.HTML.value,\n            DBTemplatesFields.ICON.value,\n            DBTemplatesFields.CONTENT.value,",
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "WorkBookDetailListSerializer",
        "kind": 6,
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "peekOfCode": "class WorkBookDetailListSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = WorkBooks\n        fields = (\n            DBWorkBooksFields.ID.value,\n            DBWorkBooksFields.NAME.value,\n            DBWorkBooksFields.QUANTITY.value,\n        )\n# ---------------------------------------------------------------------------- #\n#                             DOCUMENTS SERIALIZERS                            #",
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "DocumentsCreateSerializer",
        "kind": 6,
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "peekOfCode": "class DocumentsCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Documents\n        fields = (\n            DBDocumentsFields.CONTENT.value,\n            DBDocumentsFields.NAME.value,\n            DBDocumentsFields.PARAMS_VALUE.value,\n            DBDocumentsFields.WORKBOOK.value,\n            DBDocumentsFields.TEMPLATE.value,\n        )",
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "DocumentsDetailListSerializer",
        "kind": 6,
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "peekOfCode": "class DocumentsDetailListSerializer(serializers.ModelSerializer):\n    template_name = serializers.SerializerMethodField()\n    def get_template_name(self, obj):\n        return Templates.objects.get(id = obj.template_id).name\n    class Meta:\n        model = Documents\n        fields = (\n            DBDocumentsFields.ID.value,\n            DBDocumentsFields.NAME.value,\n            DBDocumentsFields.WORKBOOK.value,",
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "DocumentsDetailSerializer",
        "kind": 6,
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "peekOfCode": "class DocumentsDetailSerializer(serializers.ModelSerializer):\n    template_name = serializers.SerializerMethodField()\n    def get_template_name(self, obj):\n        return Templates.objects.get(id = obj.template_id).name\n    class Meta:\n        model = Documents\n        fields = (\n            DBDocumentsFields.ID.value,\n            DBDocumentsFields.NAME.value,\n            DBDocumentsFields.WORKBOOK.value,",
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "DocumentsUpdateSerializer",
        "kind": 6,
        "importPath": "gpt_user.documents.serializers.documents",
        "description": "gpt_user.documents.serializers.documents",
        "peekOfCode": "class DocumentsUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Documents\n        fields = (\n            DBDocumentsFields.ID.value,\n            DBDocumentsFields.CONTENT.value,\n        )",
        "detail": "gpt_user.documents.serializers.documents",
        "documentation": {}
    },
    {
        "label": "DocumentService",
        "kind": 6,
        "importPath": "gpt_user.documents.services.documents",
        "description": "gpt_user.documents.services.documents",
        "peekOfCode": "class DocumentService(ChatGPTServiceBase):\n    def __init__(self):\n        super(DocumentService, self).__init__()\n        self.generate_response_content = \"\"\n    # Public methods\n    def generate_result_completion_member(\n        self,\n        prompt,\n        request_user,\n        system_message=\"You are ChatGPT, a large language model trained by OpenAI. Follow the user's instructions carefully. Respond using markdown.\", ",
        "detail": "gpt_user.documents.services.documents",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_user.documents.services.documents",
        "description": "gpt_user.documents.services.documents",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DocumentService(ChatGPTServiceBase):\n    def __init__(self):\n        super(DocumentService, self).__init__()\n        self.generate_response_content = \"\"\n    # Public methods\n    def generate_result_completion_member(\n        self,\n        prompt,\n        request_user,",
        "detail": "gpt_user.documents.services.documents",
        "documentation": {}
    },
    {
        "label": "process_generate_document",
        "kind": 2,
        "importPath": "gpt_user.documents.views.view_api",
        "description": "gpt_user.documents.views.view_api",
        "peekOfCode": "def process_generate_document(request):\n    documents_service = DocumentService()\n    data = request.data\n    completion = documents_service.generate_result_completion_member(\n        prompt=data.get('prompt'),\n        system_message=data.get('system_message'),\n        temperature=data.get('temperature'),\n        top_p=data.get('top_p'),\n        stream=True,\n        request_user=request.user,",
        "detail": "gpt_user.documents.views.view_api",
        "documentation": {}
    },
    {
        "label": "TemplatesViewSet",
        "kind": 6,
        "importPath": "gpt_user.documents.views.view_set",
        "description": "gpt_user.documents.views.view_set",
        "peekOfCode": "class TemplatesViewSet(\n    mixins.CreateModelMixin, \n    mixins.DestroyModelMixin,\n    mixins.UpdateModelMixin,\n    mixins.ListModelMixin, \n    mixins.RetrieveModelMixin, \n    viewsets.GenericViewSet\n):\n    queryset = Templates.objects.all()\n    serializer_classes = TemplateDetailListSerializer",
        "detail": "gpt_user.documents.views.view_set",
        "documentation": {}
    },
    {
        "label": "WorkBooksViewSet",
        "kind": 6,
        "importPath": "gpt_user.documents.views.view_set",
        "description": "gpt_user.documents.views.view_set",
        "peekOfCode": "class WorkBooksViewSet(\n    mixins.CreateModelMixin, \n    mixins.DestroyModelMixin,\n    mixins.UpdateModelMixin,\n    mixins.ListModelMixin, \n    mixins.RetrieveModelMixin, \n    viewsets.GenericViewSet\n):\n    queryset = WorkBooks.objects.all()\n    serializer_classes = WorkBookDetailListSerializer",
        "detail": "gpt_user.documents.views.view_set",
        "documentation": {}
    },
    {
        "label": "DocumentsViewSet",
        "kind": 6,
        "importPath": "gpt_user.documents.views.view_set",
        "description": "gpt_user.documents.views.view_set",
        "peekOfCode": "class DocumentsViewSet(\n    mixins.CreateModelMixin, \n    mixins.DestroyModelMixin,\n    mixins.UpdateModelMixin,\n    mixins.ListModelMixin, \n    mixins.RetrieveModelMixin, \n    viewsets.GenericViewSet\n):\n    queryset = Documents.objects.all()\n    serializer_classes = DocumentsDetailListSerializer",
        "detail": "gpt_user.documents.views.view_set",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "gpt_user.documents.urls",
        "description": "gpt_user.documents.urls",
        "peekOfCode": "urlpatterns = [\n    path('templates/list', view=TemplatesViewSet.as_view({'get': ViewSetAction.LIST.value})),\n    path('templates/<int:pk>', view=TemplatesViewSet.as_view({'get': ViewSetAction.DETAIL.value})),\n    path('templates/process-generate', process_generate_document),\n    path('workbook/list', view=WorkBooksViewSet.as_view({'get': ViewSetAction.LIST.value})),\n    path('list', view=DocumentsViewSet.as_view({'get': ViewSetAction.LIST.value})),\n    path('create', view=DocumentsViewSet.as_view({'post': ViewSetAction.CREATE.value})),\n    path('<int:pk>/detail', view=DocumentsViewSet.as_view({'get': ViewSetAction.DETAIL.value})),\n    path('<int:pk>/update', view=DocumentsViewSet.as_view({'put': ViewSetAction.UPDATE.value})),\n    path('<int:pk>/delete', view=DocumentsViewSet.as_view({'delete': ViewSetAction.DELETE.value})),",
        "detail": "gpt_user.documents.urls",
        "documentation": {}
    },
    {
        "label": "GrammarlySerializer",
        "kind": 6,
        "importPath": "gpt_user.grammarly.serializers.grammarly",
        "description": "gpt_user.grammarly.serializers.grammarly",
        "peekOfCode": "class GrammarlySerializer(serializers.Serializer):\n    text = serializers.CharField()\n    status =  serializers.BooleanField()\n    suggestion = serializers.CharField()",
        "detail": "gpt_user.grammarly.serializers.grammarly",
        "documentation": {}
    },
    {
        "label": "check_grammarly",
        "kind": 2,
        "importPath": "gpt_user.grammarly.views.view_api",
        "description": "gpt_user.grammarly.views.view_api",
        "peekOfCode": "def check_grammarly(request):\n    response = Response()\n    try:\n        text = request.GET['text_check']\n        data = {\n            \"suggestion\" : GingerIt().parse(text)\n        }\n        response.data = data\n        response.status_code = status.HTTP_200_OK\n    except:",
        "detail": "gpt_user.grammarly.views.view_api",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "gpt_user.grammarly.urls",
        "description": "gpt_user.grammarly.urls",
        "peekOfCode": "urlpatterns = [\n    path('check', view_api.check_grammarly, name='grammarly'),\n]",
        "detail": "gpt_user.grammarly.urls",
        "documentation": {}
    },
    {
        "label": "RegisterMembersSerializer",
        "kind": 6,
        "importPath": "gpt_user.members.serializers.registration",
        "description": "gpt_user.members.serializers.registration",
        "peekOfCode": "class RegisterMembersSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField(required=True, max_length=255)\n    password = serializers.CharField(required=True)\n    class Meta:\n        model = User\n        fields = (\n            DBUserFields.ID.value, \n            DBUserFields.EMAIL.value,\n            DBUserFields.PASSWORD.value, \n        )",
        "detail": "gpt_user.members.serializers.registration",
        "documentation": {}
    },
    {
        "label": "MemberRegistrationService",
        "kind": 6,
        "importPath": "gpt_user.members.services.registration",
        "description": "gpt_user.members.services.registration",
        "peekOfCode": "class MemberRegistrationService:\n    def __init__(self):\n        super(MemberRegistrationService, self).__init__()\n        # self._mail_service = MailService()\n    def register_member(self, req_data):\n        # logger.debug(\"Service: register member called. with data: %s\", req_data)\n        with transaction.atomic():\n            serializers = RegisterMembersSerializer(data=req_data)\n            serializers.is_valid(raise_exception=True)\n            serializers.save()",
        "detail": "gpt_user.members.services.registration",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "gpt_user.members.services.registration",
        "description": "gpt_user.members.services.registration",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass MemberRegistrationService:\n    def __init__(self):\n        super(MemberRegistrationService, self).__init__()\n        # self._mail_service = MailService()\n    def register_member(self, req_data):\n        # logger.debug(\"Service: register member called. with data: %s\", req_data)\n        with transaction.atomic():\n            serializers = RegisterMembersSerializer(data=req_data)\n            serializers.is_valid(raise_exception=True)",
        "detail": "gpt_user.members.services.registration",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "gpt_user.members.views.view_api",
        "description": "gpt_user.members.views.view_api",
        "peekOfCode": "def register(request):\n    member_service = MemberRegistrationService()\n    member_service.register_member(request.data)\n    return Response(status=status.HTTP_200_OK)",
        "detail": "gpt_user.members.views.view_api",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "gpt_user.members.urls",
        "description": "gpt_user.members.urls",
        "peekOfCode": "urlpatterns = [\n    path('register', view_api.register, name='register-member'),\n]",
        "detail": "gpt_user.members.urls",
        "documentation": {}
    },
    {
        "label": "PromptsDetailListSerializer",
        "kind": 6,
        "importPath": "gpt_user.prompts.serializers.prompts",
        "description": "gpt_user.prompts.serializers.prompts",
        "peekOfCode": "class PromptsDetailListSerializer(serializers.ModelSerializer):\n    # member = MembersDetailUpdateSerializer(many=False)\n    class Meta:\n        model = Prompts\n        fields = (\n            DBPromptsFields.ID.value,\n            # DBConversationsFields.MEMBER.value,\n            DBPromptsFields.TITLE.value,\n            DBPromptsFields.DESCRIPTION.value,\n        )",
        "detail": "gpt_user.prompts.serializers.prompts",
        "documentation": {}
    },
    {
        "label": "PromptsCreateSerializer",
        "kind": 6,
        "importPath": "gpt_user.prompts.serializers.prompts",
        "description": "gpt_user.prompts.serializers.prompts",
        "peekOfCode": "class PromptsCreateSerializer(WritableNestedModelSerializer):\n    class Meta:\n        model = Prompts\n        fields = (\n            DBPromptsFields.TITLE.value,\n            DBPromptsFields.DESCRIPTION.value,\n        )\n    def create(self, validated_data, user):\n        member = Members.objects.get(user=user)\n        prompt = Prompts.objects.create(**validated_data, member=member)",
        "detail": "gpt_user.prompts.serializers.prompts",
        "documentation": {}
    },
    {
        "label": "PromptsUpdateSerializer",
        "kind": 6,
        "importPath": "gpt_user.prompts.serializers.prompts",
        "description": "gpt_user.prompts.serializers.prompts",
        "peekOfCode": "class PromptsUpdateSerializer(WritableNestedModelSerializer):\n    class Meta:\n        model = Prompts\n        fields = (\n            DBPromptsFields.TITLE.value,\n        )",
        "detail": "gpt_user.prompts.serializers.prompts",
        "documentation": {}
    },
    {
        "label": "PromptViewSet",
        "kind": 6,
        "importPath": "gpt_user.prompts.views.view_set",
        "description": "gpt_user.prompts.views.view_set",
        "peekOfCode": "class PromptViewSet(\n    mixins.CreateModelMixin, \n    mixins.DestroyModelMixin,\n    mixins.UpdateModelMixin,\n    mixins.ListModelMixin, \n    mixins.RetrieveModelMixin, \n    viewsets.GenericViewSet\n):\n    queryset = Prompts.objects.all()\n    serializer_classes = PromptsDetailListSerializer",
        "detail": "gpt_user.prompts.views.view_set",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "gpt_user.prompts.urls",
        "description": "gpt_user.prompts.urls",
        "peekOfCode": "urlpatterns = [\n    path('list', view=PromptViewSet.as_view({'get': ViewSetAction.LIST.value})),\n    path('create', view=PromptViewSet.as_view({'post': ViewSetAction.CREATE.value})),\n    path('<int:pk>/detail', view=PromptViewSet.as_view({'get': ViewSetAction.DETAIL.value})),\n    path('<int:pk>/update', view=PromptViewSet.as_view({'put': ViewSetAction.UPDATE.value})),\n    path('<int:pk>/delete', view=PromptViewSet.as_view({'delete': ViewSetAction.DELETE.value})),\n]",
        "detail": "gpt_user.prompts.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "gpt_user.asgi",
        "description": "gpt_user.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "gpt_user.asgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "gpt_user.manage",
        "description": "gpt_user.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "gpt_user.manage",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "gpt_user.settings",
        "description": "gpt_user.settings",
        "peekOfCode": "ROOT_URLCONF = 'gpt_user.urls'\nWSGI_APPLICATION = 'gpt_user.wsgi.application'\n# ---------------------------------------------------------------------------- #\n#                                 SWAGGER                                      #\n# ---------------------------------------------------------------------------- #\nSPECTACULAR_SETTINGS['TITLE'] = 'PSCD-GPT User Api'",
        "detail": "gpt_user.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "gpt_user.settings",
        "description": "gpt_user.settings",
        "peekOfCode": "WSGI_APPLICATION = 'gpt_user.wsgi.application'\n# ---------------------------------------------------------------------------- #\n#                                 SWAGGER                                      #\n# ---------------------------------------------------------------------------- #\nSPECTACULAR_SETTINGS['TITLE'] = 'PSCD-GPT User Api'",
        "detail": "gpt_user.settings",
        "documentation": {}
    },
    {
        "label": "SPECTACULAR_SETTINGS['TITLE']",
        "kind": 5,
        "importPath": "gpt_user.settings",
        "description": "gpt_user.settings",
        "peekOfCode": "SPECTACULAR_SETTINGS['TITLE'] = 'PSCD-GPT User Api'",
        "detail": "gpt_user.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "gpt_user.urls",
        "description": "gpt_user.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include('gpt_base.urls')),\n    path('api/members/', include('gpt_user.members.urls')),\n    path('api/prompts/', include('gpt_user.prompts.urls')),\n    path('api/chat-gpt/', include('gpt_user.chat_gpt.urls')),\n    path('api/conversations/', include('gpt_user.conversations.urls')),\n    path('api/grammarly/', include('gpt_user.grammarly.urls')),\n    path('api/documents/', include('gpt_user.documents.urls')),\n]",
        "detail": "gpt_user.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "gpt_user.wsgi",
        "description": "gpt_user.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "gpt_user.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gpt_base.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage_user",
        "description": "manage_user",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gpt_user.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage_user",
        "documentation": {}
    }
]