"""
Django settings for gpt_base project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
import environ
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialise environment variables
env = environ.Env()
env.read_env(str(BASE_DIR / ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY", default="django-insecure-0xj-&j(@9t40^uro)a8=*9s#9-7%(*pe0ior33b3kuq1$z*vj9")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=True)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=['*'])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'drf_spectacular',
    'gpt_base.user',
    'gpt_user.grammarly',
    'gpt_base.members',
    'gpt_base.conversations',
    'gpt_base.master',
    'gpt_base.prompts',
    'gpt_base.documents',
    'gpt_base.templates'
]

INSTALLED_APPS = list(INSTALLED_APPS)
INSTALLED_APPS.append('gpt_base.apps.BaseConfig')

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # It was placed on the top
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'gpt_base.common.utils.middleware.CorrelationMiddleware'
]

CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", default=[])

ROOT_URLCONF = 'gpt_base.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'gpt_base/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gpt_base.wsgi.application'

# CORS
CORS_ALLOW_ALL_ORIGINS = env.bool('CORS_ALLOW_ALL_ORIGINS', default=False)
CORS_ALLOWED_ORIGINS = env.list("CORS_ALLOWED_ORIGINS", default=[])
CORS_ALLOW_HEADERS = list(default_headers) + ['cookies', 'ads-code']


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        "ENGINE": env.str("DB_ENGINE"),
        "NAME": env.str("DB_NAME"),
        "USER": env.str("DB_USER"),
        "PASSWORD": env.str("DB_PASSWORD"),
        "HOST": env.str("DB_HOST"),
        "PORT": env.str("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = os.path.join(PROJECT_DIR, 'static')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ---------------------------------------------------------------------------- #
#                                 TRANSLATION                                  #
# ---------------------------------------------------------------------------- #


# ---------------------------------------------------------------------------- #
#                                    AUTH                                      #
# ---------------------------------------------------------------------------- #
AUTH_USER_MODEL = 'user.User'

REST_FRAMEWORK = {
    'DATETIME_FORMAT': "%Y-%m-%d %H:%M:%S.%f%z",
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'gpt_base.common.custom.authentication.CustomJWTAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

UPDATE_LAST_LOGIN = True

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=env.float("ACCESS_TOKEN_LIFETIME")),
    'REFRESH_TOKEN_LIFETIME': timedelta(seconds=env.float("REFRESH_TOKEN_LIFETIME")),
    'AUTH_TOKEN_CLASSES': (
        'rest_framework_simplejwt.tokens.AccessToken',
    ),
    'UPDATE_LAST_LOGIN': False,
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

EMAIL_CRYPTO_FIELD_KEY = env.str("EMAIL_CRYPTO_FIELD_KEY")
# ---------------------------------------------------------------------------- #
#                                 SWAGGER                                      #
# ---------------------------------------------------------------------------- #
DISPLAY_SWAGGER = env.bool("DISPLAY_SWAGGER", True)

SPECTACULAR_SETTINGS = {
    'TITLE': 'PSCD-GPT Api',
    'DESCRIPTION': 'PSCD-GPT Api',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api',
}
# ---------------------------------------------------------------------------- #
#                                    LOGS                                      #
# ---------------------------------------------------------------------------- #

# ---------------------------------------------------------------------------- #
#                                    BANK                                      #
# ---------------------------------------------------------------------------- #

# ---------------------------------------------------------------------------- #
#                                    MAIL                                      #
# ---------------------------------------------------------------------------- #

# ---------------------------------------------------------------------------- #
#                             AUTH URL FRONTEND                                #
# ---------------------------------------------------------------------------- #

# ---------------------------------------------------------------------------- #
#                                    AWS                                       #
# ---------------------------------------------------------------------------- #

# ---------------------------------------------------------------------------- #
#                                   OPEN AI                                    #
# ---------------------------------------------------------------------------- #
OPENAI_API_KEY=env.str("OPENAI_API_KEY")
OPENAI_MODEL=env.str("OPENAI_MODEL")